
matrix.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00800100  00000b5c  00000bf0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800192  00800192  00000c82  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c82  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000cb4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019bd  00000000  00000000  00000e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000628  00000000  00000000  000027f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000db7  00000000  00000000  00002e1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000040c  00000000  00000000  00003bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000379  00000000  00000000  00003fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cbd  00000000  00000000  00004359  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000280  00000000  00000000  00005016  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e5       	ldi	r30, 0x5C	; 92
  a0:	fb e0       	ldi	r31, 0x0B	; 11
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 39       	cpi	r26, 0x92	; 146
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e9       	ldi	r26, 0x92	; 146
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 39       	cpi	r26, 0x9C	; 156
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	82 d4       	rcall	.+2308   	; 0x9c8 <main>
  c4:	49 c5       	rjmp	.+2706   	; 0xb58 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <lcd_command>:
 void setcursor(int position)
 {
	for (int i = 0; i <position;i++){
	 lcd_command(0b0000010100);
	}
 }
  c8:	98 2f       	mov	r25, r24
  ca:	90 7f       	andi	r25, 0xF0	; 240
  cc:	95 bb       	out	0x15, r25	; 21
  ce:	ab 9a       	sbi	0x15, 3	; 21
  d0:	e3 ed       	ldi	r30, 0xD3	; 211
  d2:	f0 e3       	ldi	r31, 0x30	; 48
  d4:	31 97       	sbiw	r30, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <lcd_command+0xc>
  d8:	00 c0       	rjmp	.+0      	; 0xda <lcd_command+0x12>
  da:	00 00       	nop
  dc:	94 e0       	ldi	r25, 0x04	; 4
  de:	95 bb       	out	0x15, r25	; 21
  e0:	f0 e1       	ldi	r31, 0x10	; 16
  e2:	8f 9f       	mul	r24, r31
  e4:	c0 01       	movw	r24, r0
  e6:	11 24       	eor	r1, r1
  e8:	85 bb       	out	0x15, r24	; 21
  ea:	ab 9a       	sbi	0x15, 3	; 21
  ec:	83 ed       	ldi	r24, 0xD3	; 211
  ee:	90 e3       	ldi	r25, 0x30	; 48
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <lcd_command+0x28>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <lcd_command+0x2e>
  f6:	00 00       	nop
  f8:	15 ba       	out	0x15, r1	; 21
  fa:	08 95       	ret

000000fc <init>:
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	e3 df       	rcall	.-58     	; 0xc8 <lcd_command>
 102:	88 e2       	ldi	r24, 0x28	; 40
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	e0 df       	rcall	.-64     	; 0xc8 <lcd_command>
 108:	8c e0       	ldi	r24, 0x0C	; 12
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	dd df       	rcall	.-70     	; 0xc8 <lcd_command>
 10e:	86 e0       	ldi	r24, 0x06	; 6
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	da df       	rcall	.-76     	; 0xc8 <lcd_command>
 114:	80 e8       	ldi	r24, 0x80	; 128
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	d7 cf       	rjmp	.-82     	; 0xc8 <lcd_command>
 11a:	08 95       	ret

0000011c <clear>:
 void clear(){
 lcd_command(0x01);
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	d3 cf       	rjmp	.-90     	; 0xc8 <lcd_command>
 122:	08 95       	ret

00000124 <wait>:
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 124:	18 16       	cp	r1, r24
 126:	19 06       	cpc	r1, r25
 128:	6c f4       	brge	.+26     	; 0x144 <wait+0x20>
 12a:	20 e0       	ldi	r18, 0x00	; 0
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	e9 ef       	ldi	r30, 0xF9	; 249
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	31 97       	sbiw	r30, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <wait+0xe>
 136:	00 c0       	rjmp	.+0      	; 0x138 <wait+0x14>
 138:	00 00       	nop
 13a:	2f 5f       	subi	r18, 0xFF	; 255
 13c:	3f 4f       	sbci	r19, 0xFF	; 255
 13e:	28 17       	cp	r18, r24
 140:	39 07       	cpc	r19, r25
 142:	a9 f7       	brne	.-22     	; 0x12e <wait+0xa>
 144:	08 95       	ret

00000146 <twi_init>:
 146:	10 92 71 00 	sts	0x0071, r1
 14a:	80 e2       	ldi	r24, 0x20	; 32
 14c:	80 93 70 00 	sts	0x0070, r24
 150:	08 95       	ret

00000152 <twi_start>:
 152:	84 ea       	ldi	r24, 0xA4	; 164
 154:	80 93 74 00 	sts	0x0074, r24
 158:	e4 e7       	ldi	r30, 0x74	; 116
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	88 23       	and	r24, r24
 160:	ec f7       	brge	.-6      	; 0x15c <twi_start+0xa>
 162:	08 95       	ret

00000164 <twi_tx>:
}

void twi_tx(unsigned char data)
{
	TWDR = data;
 164:	80 93 73 00 	sts	0x0073, r24
	TWCR = (0x80 | 0x04);
 168:	84 e8       	ldi	r24, 0x84	; 132
 16a:	80 93 74 00 	sts	0x0074, r24
	while( 0 == (TWCR & 0x80) );
 16e:	e4 e7       	ldi	r30, 0x74	; 116
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	88 23       	and	r24, r24
 176:	ec f7       	brge	.-6      	; 0x172 <twi_tx+0xe>
}
 178:	08 95       	ret

0000017a <smileyblij>:
	, {33}
	, {30}


};
void smileyblij(void){
 17a:	af 92       	push	r10
 17c:	bf 92       	push	r11
 17e:	cf 92       	push	r12
 180:	df 92       	push	r13
 182:	ff 92       	push	r15
 184:	0f 93       	push	r16
 186:	1f 93       	push	r17
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	00 e0       	ldi	r16, 0x00	; 0
 18e:	11 e0       	ldi	r17, 0x01	; 1
 190:	0f 2e       	mov	r0, r31
 192:	f8 e0       	ldi	r31, 0x08	; 8
 194:	af 2e       	mov	r10, r31
 196:	f1 e0       	ldi	r31, 0x01	; 1
 198:	bf 2e       	mov	r11, r31
 19a:	f0 2d       	mov	r31, r0
int x = 0;
for (int adres = 0; adres <= 14; adres += 2)
 19c:	c0 e0       	ldi	r28, 0x00	; 0
 19e:	d0 e0       	ldi	r29, 0x00	; 0
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 1a0:	0f 2e       	mov	r0, r31
 1a2:	f4 e7       	ldi	r31, 0x74	; 116
 1a4:	cf 2e       	mov	r12, r31
 1a6:	d1 2c       	mov	r13, r1
 1a8:	f0 2d       	mov	r31, r0
 1aa:	0f 2e       	mov	r0, r31
 1ac:	f4 e9       	ldi	r31, 0x94	; 148
 1ae:	ff 2e       	mov	r15, r31
 1b0:	f0 2d       	mov	r31, r0
};
void smileyblij(void){
int x = 0;
for (int adres = 0; adres <= 14; adres += 2)
{
	twi_start();
 1b2:	cf df       	rcall	.-98     	; 0x152 <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 1b4:	80 ee       	ldi	r24, 0xE0	; 224
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	d5 df       	rcall	.-86     	; 0x164 <twi_tx>
	twi_tx(adres);	// Address
 1ba:	ce 01       	movw	r24, r28
 1bc:	d3 df       	rcall	.-90     	; 0x164 <twi_tx>
	twi_tx(smileys[x].data);	// data
 1be:	f8 01       	movw	r30, r16
 1c0:	81 91       	ld	r24, Z+
 1c2:	8f 01       	movw	r16, r30
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	ce df       	rcall	.-100    	; 0x164 <twi_tx>
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 1c8:	f6 01       	movw	r30, r12
 1ca:	f0 82       	st	Z, r15


};
void smileyblij(void){
int x = 0;
for (int adres = 0; adres <= 14; adres += 2)
 1cc:	22 96       	adiw	r28, 0x02	; 2
 1ce:	0a 15       	cp	r16, r10
 1d0:	1b 05       	cpc	r17, r11
 1d2:	79 f7       	brne	.-34     	; 0x1b2 <smileyblij+0x38>
	twi_tx(smileys[x].data);	// data
	twi_stop();
	x++;
}

}
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	1f 91       	pop	r17
 1da:	0f 91       	pop	r16
 1dc:	ff 90       	pop	r15
 1de:	df 90       	pop	r13
 1e0:	cf 90       	pop	r12
 1e2:	bf 90       	pop	r11
 1e4:	af 90       	pop	r10
 1e6:	08 95       	ret

000001e8 <smileyneut>:
void smileyneut(void){
 1e8:	cf 92       	push	r12
 1ea:	df 92       	push	r13
 1ec:	ff 92       	push	r15
 1ee:	0f 93       	push	r16
 1f0:	1f 93       	push	r17
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	08 e0       	ldi	r16, 0x08	; 8
 1f8:	11 e0       	ldi	r17, 0x01	; 1
	int x = 8;
	for (int adres = 0; adres <= 14; adres += 2)
 1fa:	c0 e0       	ldi	r28, 0x00	; 0
 1fc:	d0 e0       	ldi	r29, 0x00	; 0
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 1fe:	0f 2e       	mov	r0, r31
 200:	f4 e7       	ldi	r31, 0x74	; 116
 202:	cf 2e       	mov	r12, r31
 204:	d1 2c       	mov	r13, r1
 206:	f0 2d       	mov	r31, r0
 208:	0f 2e       	mov	r0, r31
 20a:	f4 e9       	ldi	r31, 0x94	; 148
 20c:	ff 2e       	mov	r15, r31
 20e:	f0 2d       	mov	r31, r0
}
void smileyneut(void){
	int x = 8;
	for (int adres = 0; adres <= 14; adres += 2)
	{
		twi_start();
 210:	a0 df       	rcall	.-192    	; 0x152 <twi_start>
		twi_tx(0xE0);	// Display I2C addres + R/W bit
 212:	80 ee       	ldi	r24, 0xE0	; 224
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	a6 df       	rcall	.-180    	; 0x164 <twi_tx>
		twi_tx(adres);	// Address
 218:	ce 01       	movw	r24, r28
 21a:	a4 df       	rcall	.-184    	; 0x164 <twi_tx>
		twi_tx(smileys[x].data);	// data
 21c:	f8 01       	movw	r30, r16
 21e:	81 91       	ld	r24, Z+
 220:	8f 01       	movw	r16, r30
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	9f df       	rcall	.-194    	; 0x164 <twi_tx>
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 226:	f6 01       	movw	r30, r12
 228:	f0 82       	st	Z, r15
}

}
void smileyneut(void){
	int x = 8;
	for (int adres = 0; adres <= 14; adres += 2)
 22a:	22 96       	adiw	r28, 0x02	; 2
 22c:	c0 31       	cpi	r28, 0x10	; 16
 22e:	d1 05       	cpc	r29, r1
 230:	79 f7       	brne	.-34     	; 0x210 <smileyneut+0x28>
		twi_tx(smileys[x].data);	// data
		twi_stop();
		x++;
	}

}
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	1f 91       	pop	r17
 238:	0f 91       	pop	r16
 23a:	ff 90       	pop	r15
 23c:	df 90       	pop	r13
 23e:	cf 90       	pop	r12
 240:	08 95       	ret

00000242 <smileyniet>:
void smileyniet(void){
 242:	cf 92       	push	r12
 244:	df 92       	push	r13
 246:	ff 92       	push	r15
 248:	0f 93       	push	r16
 24a:	1f 93       	push	r17
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	00 e1       	ldi	r16, 0x10	; 16
 252:	11 e0       	ldi	r17, 0x01	; 1
	int x = 16;
	for (int adres = 0; adres <= 14; adres += 2)
 254:	c0 e0       	ldi	r28, 0x00	; 0
 256:	d0 e0       	ldi	r29, 0x00	; 0
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 258:	0f 2e       	mov	r0, r31
 25a:	f4 e7       	ldi	r31, 0x74	; 116
 25c:	cf 2e       	mov	r12, r31
 25e:	d1 2c       	mov	r13, r1
 260:	f0 2d       	mov	r31, r0
 262:	0f 2e       	mov	r0, r31
 264:	f4 e9       	ldi	r31, 0x94	; 148
 266:	ff 2e       	mov	r15, r31
 268:	f0 2d       	mov	r31, r0
}
void smileyniet(void){
	int x = 16;
	for (int adres = 0; adres <= 14; adres += 2)
	{
		twi_start();
 26a:	73 df       	rcall	.-282    	; 0x152 <twi_start>
		twi_tx(0xE0);	// Display I2C addres + R/W bit
 26c:	80 ee       	ldi	r24, 0xE0	; 224
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	79 df       	rcall	.-270    	; 0x164 <twi_tx>
		twi_tx(adres);	// Address
 272:	ce 01       	movw	r24, r28
 274:	77 df       	rcall	.-274    	; 0x164 <twi_tx>
		twi_tx(smileys[x].data);	// data
 276:	f8 01       	movw	r30, r16
 278:	81 91       	ld	r24, Z+
 27a:	8f 01       	movw	r16, r30
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	72 df       	rcall	.-284    	; 0x164 <twi_tx>
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 280:	f6 01       	movw	r30, r12
 282:	f0 82       	st	Z, r15
	}

}
void smileyniet(void){
	int x = 16;
	for (int adres = 0; adres <= 14; adres += 2)
 284:	22 96       	adiw	r28, 0x02	; 2
 286:	c0 31       	cpi	r28, 0x10	; 16
 288:	d1 05       	cpc	r29, r1
 28a:	79 f7       	brne	.-34     	; 0x26a <smileyniet+0x28>
		twi_tx(smileys[x].data);	// data
		twi_stop();
		x++;
	}

}
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	1f 91       	pop	r17
 292:	0f 91       	pop	r16
 294:	ff 90       	pop	r15
 296:	df 90       	pop	r13
 298:	cf 90       	pop	r12
 29a:	08 95       	ret

0000029c <LiftStart>:
				}
			}
	}
}
}
void LiftStart(void){
 29c:	af 92       	push	r10
 29e:	bf 92       	push	r11
 2a0:	cf 92       	push	r12
 2a2:	df 92       	push	r13
 2a4:	ff 92       	push	r15
 2a6:	0f 93       	push	r16
 2a8:	1f 93       	push	r17
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	05 e5       	ldi	r16, 0x55	; 85
 2b0:	11 e0       	ldi	r17, 0x01	; 1
 2b2:	0f 2e       	mov	r0, r31
 2b4:	fd e5       	ldi	r31, 0x5D	; 93
 2b6:	af 2e       	mov	r10, r31
 2b8:	f1 e0       	ldi	r31, 0x01	; 1
 2ba:	bf 2e       	mov	r11, r31
 2bc:	f0 2d       	mov	r31, r0
int x = 0;
for (int adres = 0; adres <= 14; adres += 2)
 2be:	c0 e0       	ldi	r28, 0x00	; 0
 2c0:	d0 e0       	ldi	r29, 0x00	; 0
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 2c2:	0f 2e       	mov	r0, r31
 2c4:	f4 e7       	ldi	r31, 0x74	; 116
 2c6:	cf 2e       	mov	r12, r31
 2c8:	d1 2c       	mov	r13, r1
 2ca:	f0 2d       	mov	r31, r0
 2cc:	0f 2e       	mov	r0, r31
 2ce:	f4 e9       	ldi	r31, 0x94	; 148
 2d0:	ff 2e       	mov	r15, r31
 2d2:	f0 2d       	mov	r31, r0
}
void LiftStart(void){
int x = 0;
for (int adres = 0; adres <= 14; adres += 2)
{
	twi_start();
 2d4:	3e df       	rcall	.-388    	; 0x152 <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 2d6:	80 ee       	ldi	r24, 0xE0	; 224
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	44 df       	rcall	.-376    	; 0x164 <twi_tx>
	twi_tx(adres);	// Address
 2dc:	ce 01       	movw	r24, r28
 2de:	42 df       	rcall	.-380    	; 0x164 <twi_tx>
	twi_tx(liftup[x].data);	// data
 2e0:	f8 01       	movw	r30, r16
 2e2:	81 91       	ld	r24, Z+
 2e4:	8f 01       	movw	r16, r30
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	3d df       	rcall	.-390    	; 0x164 <twi_tx>
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 2ea:	f6 01       	movw	r30, r12
 2ec:	f0 82       	st	Z, r15
	}
}
}
void LiftStart(void){
int x = 0;
for (int adres = 0; adres <= 14; adres += 2)
 2ee:	22 96       	adiw	r28, 0x02	; 2
 2f0:	0a 15       	cp	r16, r10
 2f2:	1b 05       	cpc	r17, r11
 2f4:	79 f7       	brne	.-34     	; 0x2d4 <LiftStart+0x38>
	twi_tx(adres);	// Address
	twi_tx(liftup[x].data);	// data
	twi_stop();
	x++;
}
}
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	1f 91       	pop	r17
 2fc:	0f 91       	pop	r16
 2fe:	ff 90       	pop	r15
 300:	df 90       	pop	r13
 302:	cf 90       	pop	r12
 304:	bf 90       	pop	r11
 306:	af 90       	pop	r10
 308:	08 95       	ret

0000030a <numbercheck>:
	wait(48);
	}

}
void numbercheck(void){
switch (check)
 30a:	80 91 9a 01 	lds	r24, 0x019A
 30e:	90 91 9b 01 	lds	r25, 0x019B
 312:	87 35       	cpi	r24, 0x57	; 87
 314:	24 e0       	ldi	r18, 0x04	; 4
 316:	92 07       	cpc	r25, r18
 318:	21 f0       	breq	.+8      	; 0x322 <numbercheck+0x18>
 31a:	8e 3a       	cpi	r24, 0xAE	; 174
 31c:	98 40       	sbci	r25, 0x08	; 8
 31e:	b1 f0       	breq	.+44     	; 0x34c <numbercheck+0x42>
 320:	10 c0       	rjmp	.+32     	; 0x342 <numbercheck+0x38>
{
	case 1111:
	running = 1;
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	90 93 99 01 	sts	0x0199, r25
 32a:	80 93 98 01 	sts	0x0198, r24
	runningstate = 1;
 32e:	90 93 97 01 	sts	0x0197, r25
 332:	80 93 96 01 	sts	0x0196, r24
	check = 0;
 336:	10 92 9b 01 	sts	0x019B, r1
 33a:	10 92 9a 01 	sts	0x019A, r1
	LiftStart();
 33e:	ae cf       	rjmp	.-164    	; 0x29c <LiftStart>
	break;
 340:	08 95       	ret
	default:
	check = 0;
 342:	10 92 9b 01 	sts	0x019B, r1
 346:	10 92 9a 01 	sts	0x019A, r1
	break;
 34a:	08 95       	ret
	case 2222:
	running = 1;
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	90 93 99 01 	sts	0x0199, r25
 354:	80 93 98 01 	sts	0x0198, r24
	runningstate = 2;
 358:	82 e0       	ldi	r24, 0x02	; 2
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	90 93 97 01 	sts	0x0197, r25
 360:	80 93 96 01 	sts	0x0196, r24
	check = 0;
 364:	10 92 9b 01 	sts	0x019B, r1
 368:	10 92 9a 01 	sts	0x019A, r1
	smileyblij();
 36c:	06 cf       	rjmp	.-500    	; 0x17a <smileyblij>
 36e:	08 95       	ret

00000370 <clearmatrix>:
	twi_tx(liftup[x].data);	// data
	twi_stop();
	x++;
}
}
void clearmatrix(void){
 370:	ef 92       	push	r14
 372:	ff 92       	push	r15
 374:	1f 93       	push	r17
 376:	cf 93       	push	r28
 378:	df 93       	push	r29
for (int adres = 0; adres <= 14; adres += 2)
 37a:	c0 e0       	ldi	r28, 0x00	; 0
 37c:	d0 e0       	ldi	r29, 0x00	; 0
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 37e:	0f 2e       	mov	r0, r31
 380:	f4 e7       	ldi	r31, 0x74	; 116
 382:	ef 2e       	mov	r14, r31
 384:	f1 2c       	mov	r15, r1
 386:	f0 2d       	mov	r31, r0
 388:	14 e9       	ldi	r17, 0x94	; 148
}
}
void clearmatrix(void){
for (int adres = 0; adres <= 14; adres += 2)
{
	twi_start();
 38a:	e3 de       	rcall	.-570    	; 0x152 <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 38c:	80 ee       	ldi	r24, 0xE0	; 224
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	e9 de       	rcall	.-558    	; 0x164 <twi_tx>
	twi_tx(adres);	// Address
 392:	ce 01       	movw	r24, r28
 394:	e7 de       	rcall	.-562    	; 0x164 <twi_tx>
	twi_tx(0);	// data
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	e4 de       	rcall	.-568    	; 0x164 <twi_tx>
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 39c:	f7 01       	movw	r30, r14
 39e:	10 83       	st	Z, r17
	twi_stop();
	x++;
}
}
void clearmatrix(void){
for (int adres = 0; adres <= 14; adres += 2)
 3a0:	22 96       	adiw	r28, 0x02	; 2
 3a2:	c0 31       	cpi	r28, 0x10	; 16
 3a4:	d1 05       	cpc	r29, r1
 3a6:	89 f7       	brne	.-30     	; 0x38a <clearmatrix+0x1a>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
	twi_tx(adres);	// Address
	twi_tx(0);	// data
	twi_stop();
}
}
 3a8:	df 91       	pop	r29
 3aa:	cf 91       	pop	r28
 3ac:	1f 91       	pop	r17
 3ae:	ff 90       	pop	r15
 3b0:	ef 90       	pop	r14
 3b2:	08 95       	ret

000003b4 <Liftup>:
void Liftup(int desti){
 3b4:	9f 92       	push	r9
 3b6:	af 92       	push	r10
 3b8:	bf 92       	push	r11
 3ba:	cf 92       	push	r12
 3bc:	df 92       	push	r13
 3be:	ef 92       	push	r14
 3c0:	ff 92       	push	r15
 3c2:	0f 93       	push	r16
 3c4:	1f 93       	push	r17
 3c6:	cf 93       	push	r28
 3c8:	df 93       	push	r29
	for (place; place <= desti; place++)
 3ca:	00 91 94 01 	lds	r16, 0x0194
 3ce:	10 91 95 01 	lds	r17, 0x0195
 3d2:	80 17       	cp	r24, r16
 3d4:	91 07       	cpc	r25, r17
 3d6:	1c f5       	brge	.+70     	; 0x41e <Liftup+0x6a>
 3d8:	33 c0       	rjmp	.+102    	; 0x440 <Liftup+0x8c>
	{
	int x = place;
		for (int adres = 0; adres <= 14; adres += 2)
		{
			twi_start();
 3da:	bb de       	rcall	.-650    	; 0x152 <twi_start>
			twi_tx(0xE0);	// Display I2C addres + R/W bit
 3dc:	80 ee       	ldi	r24, 0xE0	; 224
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	c1 de       	rcall	.-638    	; 0x164 <twi_tx>
			twi_tx(adres);	// Address
 3e2:	ce 01       	movw	r24, r28
 3e4:	bf de       	rcall	.-642    	; 0x164 <twi_tx>
			twi_tx(liftup[x].data);	// data
 3e6:	f8 01       	movw	r30, r16
 3e8:	81 91       	ld	r24, Z+
 3ea:	8f 01       	movw	r16, r30
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	ba de       	rcall	.-652    	; 0x164 <twi_tx>
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 3f0:	f7 01       	movw	r30, r14
 3f2:	b0 82       	st	Z, r11
}
void Liftup(int desti){
	for (place; place <= desti; place++)
	{
	int x = place;
		for (int adres = 0; adres <= 14; adres += 2)
 3f4:	22 96       	adiw	r28, 0x02	; 2
 3f6:	c0 31       	cpi	r28, 0x10	; 16
 3f8:	d1 05       	cpc	r29, r1
 3fa:	79 f7       	brne	.-34     	; 0x3da <Liftup+0x26>
			twi_tx(adres);	// Address
			twi_tx(liftup[x].data);	// data
			twi_stop();
			x++;
		}
		wait(1250);
 3fc:	82 ee       	ldi	r24, 0xE2	; 226
 3fe:	94 e0       	ldi	r25, 0x04	; 4
 400:	91 de       	rcall	.-734    	; 0x124 <wait>
	twi_tx(0);	// data
	twi_stop();
}
}
void Liftup(int desti){
	for (place; place <= desti; place++)
 402:	00 91 94 01 	lds	r16, 0x0194
 406:	10 91 95 01 	lds	r17, 0x0195
 40a:	0f 5f       	subi	r16, 0xFF	; 255
 40c:	1f 4f       	sbci	r17, 0xFF	; 255
 40e:	10 93 95 01 	sts	0x0195, r17
 412:	00 93 94 01 	sts	0x0194, r16
 416:	c0 16       	cp	r12, r16
 418:	d1 06       	cpc	r13, r17
 41a:	6c f4       	brge	.+26     	; 0x436 <Liftup+0x82>
 41c:	11 c0       	rjmp	.+34     	; 0x440 <Liftup+0x8c>
 41e:	6c 01       	movw	r12, r24
	twi_tx(adres);	// Address
	twi_tx(0);	// data
	twi_stop();
}
}
void Liftup(int desti){
 420:	91 2c       	mov	r9, r1
 422:	a1 2c       	mov	r10, r1
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 424:	0f 2e       	mov	r0, r31
 426:	f4 e7       	ldi	r31, 0x74	; 116
 428:	ef 2e       	mov	r14, r31
 42a:	f1 2c       	mov	r15, r1
 42c:	f0 2d       	mov	r31, r0
 42e:	0f 2e       	mov	r0, r31
 430:	f4 e9       	ldi	r31, 0x94	; 148
 432:	bf 2e       	mov	r11, r31
 434:	f0 2d       	mov	r31, r0
 436:	0b 5a       	subi	r16, 0xAB	; 171
 438:	1e 4f       	sbci	r17, 0xFE	; 254
	twi_tx(adres);	// Address
	twi_tx(0);	// data
	twi_stop();
}
}
void Liftup(int desti){
 43a:	c9 2d       	mov	r28, r9
 43c:	da 2d       	mov	r29, r10
 43e:	cd cf       	rjmp	.-102    	; 0x3da <Liftup+0x26>
			twi_stop();
			x++;
		}
		wait(1250);
	}
	}
 440:	df 91       	pop	r29
 442:	cf 91       	pop	r28
 444:	1f 91       	pop	r17
 446:	0f 91       	pop	r16
 448:	ff 90       	pop	r15
 44a:	ef 90       	pop	r14
 44c:	df 90       	pop	r13
 44e:	cf 90       	pop	r12
 450:	bf 90       	pop	r11
 452:	af 90       	pop	r10
 454:	9f 90       	pop	r9
 456:	08 95       	ret

00000458 <Liftdown>:

void Liftdown(int desti){
 458:	9f 92       	push	r9
 45a:	af 92       	push	r10
 45c:	bf 92       	push	r11
 45e:	cf 92       	push	r12
 460:	df 92       	push	r13
 462:	ef 92       	push	r14
 464:	ff 92       	push	r15
 466:	0f 93       	push	r16
 468:	1f 93       	push	r17
 46a:	cf 93       	push	r28
 46c:	df 93       	push	r29
	for (place; place >= desti; place--)
 46e:	00 91 94 01 	lds	r16, 0x0194
 472:	10 91 95 01 	lds	r17, 0x0195
 476:	08 17       	cp	r16, r24
 478:	19 07       	cpc	r17, r25
 47a:	1c f5       	brge	.+70     	; 0x4c2 <Liftdown+0x6a>
 47c:	33 c0       	rjmp	.+102    	; 0x4e4 <Liftdown+0x8c>
	{
		int x=place;
		for (int adres = 0; adres <= 14; adres += 2)
		{
			twi_start();
 47e:	69 de       	rcall	.-814    	; 0x152 <twi_start>
			twi_tx(0xE0);	// Display I2C addres + R/W bit
 480:	80 ee       	ldi	r24, 0xE0	; 224
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	6f de       	rcall	.-802    	; 0x164 <twi_tx>
			twi_tx(adres);	// Address
 486:	ce 01       	movw	r24, r28
 488:	6d de       	rcall	.-806    	; 0x164 <twi_tx>
			twi_tx(liftdown[x].data);	// data
 48a:	f8 01       	movw	r30, r16
 48c:	81 91       	ld	r24, Z+
 48e:	8f 01       	movw	r16, r30
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	68 de       	rcall	.-816    	; 0x164 <twi_tx>
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 494:	f7 01       	movw	r30, r14
 496:	b0 82       	st	Z, r11

void Liftdown(int desti){
	for (place; place >= desti; place--)
	{
		int x=place;
		for (int adres = 0; adres <= 14; adres += 2)
 498:	22 96       	adiw	r28, 0x02	; 2
 49a:	c0 31       	cpi	r28, 0x10	; 16
 49c:	d1 05       	cpc	r29, r1
 49e:	79 f7       	brne	.-34     	; 0x47e <Liftdown+0x26>
			twi_tx(adres);	// Address
			twi_tx(liftdown[x].data);	// data
			twi_stop();
			x++;
		}
		wait(1250);
 4a0:	82 ee       	ldi	r24, 0xE2	; 226
 4a2:	94 e0       	ldi	r25, 0x04	; 4
 4a4:	3f de       	rcall	.-898    	; 0x124 <wait>
		wait(1250);
	}
	}

void Liftdown(int desti){
	for (place; place >= desti; place--)
 4a6:	00 91 94 01 	lds	r16, 0x0194
 4aa:	10 91 95 01 	lds	r17, 0x0195
 4ae:	01 50       	subi	r16, 0x01	; 1
 4b0:	11 09       	sbc	r17, r1
 4b2:	10 93 95 01 	sts	0x0195, r17
 4b6:	00 93 94 01 	sts	0x0194, r16
 4ba:	0c 15       	cp	r16, r12
 4bc:	1d 05       	cpc	r17, r13
 4be:	6c f4       	brge	.+26     	; 0x4da <Liftdown+0x82>
 4c0:	11 c0       	rjmp	.+34     	; 0x4e4 <Liftdown+0x8c>
 4c2:	6c 01       	movw	r12, r24
		}
		wait(1250);
	}
	}

void Liftdown(int desti){
 4c4:	91 2c       	mov	r9, r1
 4c6:	a1 2c       	mov	r10, r1
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 4c8:	0f 2e       	mov	r0, r31
 4ca:	f4 e7       	ldi	r31, 0x74	; 116
 4cc:	ef 2e       	mov	r14, r31
 4ce:	f1 2c       	mov	r15, r1
 4d0:	f0 2d       	mov	r31, r0
 4d2:	0f 2e       	mov	r0, r31
 4d4:	f4 e9       	ldi	r31, 0x94	; 148
 4d6:	bf 2e       	mov	r11, r31
 4d8:	f0 2d       	mov	r31, r0
 4da:	08 5e       	subi	r16, 0xE8	; 232
 4dc:	1e 4f       	sbci	r17, 0xFE	; 254
		}
		wait(1250);
	}
	}

void Liftdown(int desti){
 4de:	c9 2d       	mov	r28, r9
 4e0:	da 2d       	mov	r29, r10
 4e2:	cd cf       	rjmp	.-102    	; 0x47e <Liftdown+0x26>
			twi_stop();
			x++;
		}
		wait(1250);
	}
}
 4e4:	df 91       	pop	r29
 4e6:	cf 91       	pop	r28
 4e8:	1f 91       	pop	r17
 4ea:	0f 91       	pop	r16
 4ec:	ff 90       	pop	r15
 4ee:	ef 90       	pop	r14
 4f0:	df 90       	pop	r13
 4f2:	cf 90       	pop	r12
 4f4:	bf 90       	pop	r11
 4f6:	af 90       	pop	r10
 4f8:	9f 90       	pop	r9
 4fa:	08 95       	ret

000004fc <buttoncheck>:
	break;
}

}
void buttoncheck(){
if (PINF == 0b00000001)
 4fc:	80 b1       	in	r24, 0x00	; 0
 4fe:	81 30       	cpi	r24, 0x01	; 1
 500:	79 f5       	brne	.+94     	; 0x560 <buttoncheck+0x64>
{
	switch (runningstate)
 502:	80 91 96 01 	lds	r24, 0x0196
 506:	90 91 97 01 	lds	r25, 0x0197
 50a:	82 30       	cpi	r24, 0x02	; 2
 50c:	91 05       	cpc	r25, r1
 50e:	81 f0       	breq	.+32     	; 0x530 <buttoncheck+0x34>
 510:	83 30       	cpi	r24, 0x03	; 3
 512:	91 05       	cpc	r25, r1
 514:	d9 f0       	breq	.+54     	; 0x54c <buttoncheck+0x50>
 516:	01 97       	sbiw	r24, 0x01	; 1
 518:	09 f0       	breq	.+2      	; 0x51c <buttoncheck+0x20>
 51a:	0e c2       	rjmp	.+1052   	; 0x938 <buttoncheck+0x43c>
	{
		case 1:
			running = 0;
 51c:	10 92 99 01 	sts	0x0199, r1
 520:	10 92 98 01 	sts	0x0198, r1
			runningstate= 0;
 524:	10 92 97 01 	sts	0x0197, r1
 528:	10 92 96 01 	sts	0x0196, r1
			clearmatrix();
 52c:	21 cf       	rjmp	.-446    	; 0x370 <clearmatrix>
		break;
 52e:	08 95       	ret
		case 2:
			running = 0;
 530:	10 92 99 01 	sts	0x0199, r1
 534:	10 92 98 01 	sts	0x0198, r1
			runningstate = 0;
 538:	10 92 97 01 	sts	0x0197, r1
 53c:	10 92 96 01 	sts	0x0196, r1
			beep = 0;
 540:	10 92 93 01 	sts	0x0193, r1
 544:	10 92 92 01 	sts	0x0192, r1
			clearmatrix();
 548:	13 cf       	rjmp	.-474    	; 0x370 <clearmatrix>
		break;
 54a:	08 95       	ret
		case 3:
		running = 0;
 54c:	10 92 99 01 	sts	0x0199, r1
 550:	10 92 98 01 	sts	0x0198, r1
		runningstate = 0;
 554:	10 92 97 01 	sts	0x0197, r1
 558:	10 92 96 01 	sts	0x0196, r1
		clearmatrix();
 55c:	09 cf       	rjmp	.-494    	; 0x370 <clearmatrix>
		break;
 55e:	08 95       	ret

	}
}
else{
	if (PINF == 0b00000010)
 560:	80 b1       	in	r24, 0x00	; 0
 562:	82 30       	cpi	r24, 0x02	; 2
 564:	09 f0       	breq	.+2      	; 0x568 <buttoncheck+0x6c>
 566:	79 c0       	rjmp	.+242    	; 0x65a <buttoncheck+0x15e>
	{
	 switch (runningstate)
 568:	80 91 96 01 	lds	r24, 0x0196
 56c:	90 91 97 01 	lds	r25, 0x0197
 570:	81 30       	cpi	r24, 0x01	; 1
 572:	91 05       	cpc	r25, r1
 574:	09 f4       	brne	.+2      	; 0x578 <buttoncheck+0x7c>
 576:	4c c0       	rjmp	.+152    	; 0x610 <buttoncheck+0x114>
 578:	82 30       	cpi	r24, 0x02	; 2
 57a:	91 05       	cpc	r25, r1
 57c:	09 f4       	brne	.+2      	; 0x580 <buttoncheck+0x84>
 57e:	67 c0       	rjmp	.+206    	; 0x64e <buttoncheck+0x152>
 580:	89 2b       	or	r24, r25
 582:	09 f0       	breq	.+2      	; 0x586 <buttoncheck+0x8a>
 584:	d9 c1       	rjmp	.+946    	; 0x938 <buttoncheck+0x43c>
	 {
		 case 0:

		 if(check < 1000 && check > 100)
 586:	80 91 9a 01 	lds	r24, 0x019A
 58a:	90 91 9b 01 	lds	r25, 0x019B
 58e:	9c 01       	movw	r18, r24
 590:	25 56       	subi	r18, 0x65	; 101
 592:	31 09       	sbc	r19, r1
 594:	23 38       	cpi	r18, 0x83	; 131
 596:	33 40       	sbci	r19, 0x03	; 3
 598:	50 f4       	brcc	.+20     	; 0x5ae <buttoncheck+0xb2>
		 {
			 check+= 1000;
 59a:	88 51       	subi	r24, 0x18	; 24
 59c:	9c 4f       	sbci	r25, 0xFC	; 252
 59e:	90 93 9b 01 	sts	0x019B, r25
 5a2:	80 93 9a 01 	sts	0x019A, r24
			  numbercheck();
 5a6:	b1 de       	rcall	.-670    	; 0x30a <numbercheck>
			  wait(1000);
 5a8:	88 ee       	ldi	r24, 0xE8	; 232
 5aa:	93 e0       	ldi	r25, 0x03	; 3
 5ac:	bb dd       	rcall	.-1162   	; 0x124 <wait>
		 }
		 if(check < 100 && check > 10)
 5ae:	80 91 9a 01 	lds	r24, 0x019A
 5b2:	90 91 9b 01 	lds	r25, 0x019B
 5b6:	9c 01       	movw	r18, r24
 5b8:	2b 50       	subi	r18, 0x0B	; 11
 5ba:	31 09       	sbc	r19, r1
 5bc:	29 35       	cpi	r18, 0x59	; 89
 5be:	31 05       	cpc	r19, r1
 5c0:	30 f4       	brcc	.+12     	; 0x5ce <buttoncheck+0xd2>
		 {
			 check+= 100;
 5c2:	8c 59       	subi	r24, 0x9C	; 156
 5c4:	9f 4f       	sbci	r25, 0xFF	; 255
 5c6:	90 93 9b 01 	sts	0x019B, r25
 5ca:	80 93 9a 01 	sts	0x019A, r24
		 }
		 if(check < 10 && check > 0)
 5ce:	80 91 9a 01 	lds	r24, 0x019A
 5d2:	90 91 9b 01 	lds	r25, 0x019B
 5d6:	9c 01       	movw	r18, r24
 5d8:	21 50       	subi	r18, 0x01	; 1
 5da:	31 09       	sbc	r19, r1
 5dc:	29 30       	cpi	r18, 0x09	; 9
 5de:	31 05       	cpc	r19, r1
 5e0:	28 f4       	brcc	.+10     	; 0x5ec <buttoncheck+0xf0>
		 {
			 check+= 10;
 5e2:	0a 96       	adiw	r24, 0x0a	; 10
 5e4:	90 93 9b 01 	sts	0x019B, r25
 5e8:	80 93 9a 01 	sts	0x019A, r24
		 }
		 if (check == 0)
 5ec:	80 91 9a 01 	lds	r24, 0x019A
 5f0:	90 91 9b 01 	lds	r25, 0x019B
 5f4:	89 2b       	or	r24, r25
 5f6:	31 f4       	brne	.+12     	; 0x604 <buttoncheck+0x108>
		 {
			 check += 1;
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	90 93 9b 01 	sts	0x019B, r25
 600:	80 93 9a 01 	sts	0x019A, r24
		 }
		 display_nummer(check);
 604:	80 91 9a 01 	lds	r24, 0x019A
 608:	90 91 9b 01 	lds	r25, 0x019B
 60c:	28 c2       	rjmp	.+1104   	; 0xa5e <display_nummer>
		 break;
 60e:	08 95       	ret
		 case 1:
		 if (place == 0){
 610:	80 91 94 01 	lds	r24, 0x0194
 614:	90 91 95 01 	lds	r25, 0x0195
 618:	89 2b       	or	r24, r25
 61a:	49 f4       	brne	.+18     	; 0x62e <buttoncheck+0x132>
			 running = 0;
 61c:	10 92 99 01 	sts	0x0199, r1
 620:	10 92 98 01 	sts	0x0198, r1
			 runningstate= 0;
 624:	10 92 97 01 	sts	0x0197, r1
 628:	10 92 96 01 	sts	0x0196, r1
			 clearmatrix();
 62c:	a1 de       	rcall	.-702    	; 0x370 <clearmatrix>
		 }
		 if (place > 0)
 62e:	80 91 94 01 	lds	r24, 0x0194
 632:	90 91 95 01 	lds	r25, 0x0195
 636:	18 16       	cp	r1, r24
 638:	19 06       	cpc	r1, r25
 63a:	0c f0       	brlt	.+2      	; 0x63e <buttoncheck+0x142>
 63c:	7d c1       	rjmp	.+762    	; 0x938 <buttoncheck+0x43c>
		 {
		 wait(500);
 63e:	84 ef       	ldi	r24, 0xF4	; 244
 640:	91 e0       	ldi	r25, 0x01	; 1
 642:	70 dd       	rcall	.-1312   	; 0x124 <wait>
		 clear();
 644:	6b dd       	rcall	.-1322   	; 0x11c <clear>
		 Liftdown(0);
 646:	80 e0       	ldi	r24, 0x00	; 0
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	06 cf       	rjmp	.-500    	; 0x458 <Liftdown>
 64c:	08 95       	ret
		 }
		 break;
		 case 2:
	     beep = 0;
 64e:	10 92 93 01 	sts	0x0193, r1
 652:	10 92 92 01 	sts	0x0192, r1
		 smileyneut();
 656:	c8 cd       	rjmp	.-1136   	; 0x1e8 <smileyneut>
		 break;
 658:	08 95       	ret
	}
	}
	else{

			if (PINF == 0b00000100){
 65a:	80 b1       	in	r24, 0x00	; 0
 65c:	84 30       	cpi	r24, 0x04	; 4
 65e:	09 f0       	breq	.+2      	; 0x662 <buttoncheck+0x166>
 660:	74 c0       	rjmp	.+232    	; 0x74a <buttoncheck+0x24e>
			 switch (runningstate)
 662:	80 91 96 01 	lds	r24, 0x0196
 666:	90 91 97 01 	lds	r25, 0x0197
 66a:	81 30       	cpi	r24, 0x01	; 1
 66c:	91 05       	cpc	r25, r1
 66e:	09 f4       	brne	.+2      	; 0x672 <buttoncheck+0x176>
 670:	4c c0       	rjmp	.+152    	; 0x70a <buttoncheck+0x20e>
 672:	82 30       	cpi	r24, 0x02	; 2
 674:	91 05       	cpc	r25, r1
 676:	09 f4       	brne	.+2      	; 0x67a <buttoncheck+0x17e>
 678:	62 c0       	rjmp	.+196    	; 0x73e <buttoncheck+0x242>
 67a:	89 2b       	or	r24, r25
 67c:	09 f0       	breq	.+2      	; 0x680 <buttoncheck+0x184>
 67e:	5c c1       	rjmp	.+696    	; 0x938 <buttoncheck+0x43c>
			 {
				 case 0:
				if(check < 1000 && check > 100)
 680:	80 91 9a 01 	lds	r24, 0x019A
 684:	90 91 9b 01 	lds	r25, 0x019B
 688:	9c 01       	movw	r18, r24
 68a:	25 56       	subi	r18, 0x65	; 101
 68c:	31 09       	sbc	r19, r1
 68e:	23 38       	cpi	r18, 0x83	; 131
 690:	33 40       	sbci	r19, 0x03	; 3
 692:	50 f4       	brcc	.+20     	; 0x6a8 <buttoncheck+0x1ac>
				{
					check+= 2000;
 694:	80 53       	subi	r24, 0x30	; 48
 696:	98 4f       	sbci	r25, 0xF8	; 248
 698:	90 93 9b 01 	sts	0x019B, r25
 69c:	80 93 9a 01 	sts	0x019A, r24
					numbercheck();
 6a0:	34 de       	rcall	.-920    	; 0x30a <numbercheck>
					wait(1000);
 6a2:	88 ee       	ldi	r24, 0xE8	; 232
 6a4:	93 e0       	ldi	r25, 0x03	; 3
 6a6:	3e dd       	rcall	.-1412   	; 0x124 <wait>
				}
				if(check < 100 && check > 10)
 6a8:	80 91 9a 01 	lds	r24, 0x019A
 6ac:	90 91 9b 01 	lds	r25, 0x019B
 6b0:	9c 01       	movw	r18, r24
 6b2:	2b 50       	subi	r18, 0x0B	; 11
 6b4:	31 09       	sbc	r19, r1
 6b6:	29 35       	cpi	r18, 0x59	; 89
 6b8:	31 05       	cpc	r19, r1
 6ba:	30 f4       	brcc	.+12     	; 0x6c8 <buttoncheck+0x1cc>
				{
					check+= 200;
 6bc:	88 53       	subi	r24, 0x38	; 56
 6be:	9f 4f       	sbci	r25, 0xFF	; 255
 6c0:	90 93 9b 01 	sts	0x019B, r25
 6c4:	80 93 9a 01 	sts	0x019A, r24
				}
				if(check < 10 && check > 0)
 6c8:	80 91 9a 01 	lds	r24, 0x019A
 6cc:	90 91 9b 01 	lds	r25, 0x019B
 6d0:	9c 01       	movw	r18, r24
 6d2:	21 50       	subi	r18, 0x01	; 1
 6d4:	31 09       	sbc	r19, r1
 6d6:	29 30       	cpi	r18, 0x09	; 9
 6d8:	31 05       	cpc	r19, r1
 6da:	28 f4       	brcc	.+10     	; 0x6e6 <buttoncheck+0x1ea>
				{
					check+= 20;
 6dc:	44 96       	adiw	r24, 0x14	; 20
 6de:	90 93 9b 01 	sts	0x019B, r25
 6e2:	80 93 9a 01 	sts	0x019A, r24
				}
				if (check == 0)
 6e6:	80 91 9a 01 	lds	r24, 0x019A
 6ea:	90 91 9b 01 	lds	r25, 0x019B
 6ee:	89 2b       	or	r24, r25
 6f0:	31 f4       	brne	.+12     	; 0x6fe <buttoncheck+0x202>
				{
					
					check += 2;
 6f2:	82 e0       	ldi	r24, 0x02	; 2
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	90 93 9b 01 	sts	0x019B, r25
 6fa:	80 93 9a 01 	sts	0x019A, r24
				}
				display_nummer(check);
 6fe:	80 91 9a 01 	lds	r24, 0x019A
 702:	90 91 9b 01 	lds	r25, 0x019B
 706:	ab c1       	rjmp	.+854    	; 0xa5e <display_nummer>
				 break;
 708:	08 95       	ret
				 case 1:
				 if (place > 17)
 70a:	80 91 94 01 	lds	r24, 0x0194
 70e:	90 91 95 01 	lds	r25, 0x0195
 712:	42 97       	sbiw	r24, 0x12	; 18
 714:	34 f0       	brlt	.+12     	; 0x722 <buttoncheck+0x226>
				 {
				 wait(500);
 716:	84 ef       	ldi	r24, 0xF4	; 244
 718:	91 e0       	ldi	r25, 0x01	; 1
 71a:	04 dd       	rcall	.-1528   	; 0x124 <wait>
				 Liftdown(17);
 71c:	81 e1       	ldi	r24, 0x11	; 17
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	9b de       	rcall	.-714    	; 0x458 <Liftdown>
				 }
				 if (place < 17){
 722:	80 91 94 01 	lds	r24, 0x0194
 726:	90 91 95 01 	lds	r25, 0x0195
 72a:	41 97       	sbiw	r24, 0x11	; 17
 72c:	0c f0       	brlt	.+2      	; 0x730 <buttoncheck+0x234>
 72e:	04 c1       	rjmp	.+520    	; 0x938 <buttoncheck+0x43c>
				 wait(500);
 730:	84 ef       	ldi	r24, 0xF4	; 244
 732:	91 e0       	ldi	r25, 0x01	; 1
 734:	f7 dc       	rcall	.-1554   	; 0x124 <wait>
				 Liftup(17);
 736:	81 e1       	ldi	r24, 0x11	; 17
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	3c ce       	rjmp	.-904    	; 0x3b4 <Liftup>
 73c:	08 95       	ret
				 }
				 break;
				 case 2:
				 beep = 0;
 73e:	10 92 93 01 	sts	0x0193, r1
 742:	10 92 92 01 	sts	0x0192, r1
				 smileyblij();
 746:	19 cd       	rjmp	.-1486   	; 0x17a <smileyblij>

				 break;
 748:	08 95       	ret
			}}
			else{
				if (PINF == 0b00001000){
 74a:	80 b1       	in	r24, 0x00	; 0
 74c:	88 30       	cpi	r24, 0x08	; 8
 74e:	09 f0       	breq	.+2      	; 0x752 <buttoncheck+0x256>
 750:	74 c0       	rjmp	.+232    	; 0x83a <buttoncheck+0x33e>
				 switch (runningstate)
 752:	80 91 96 01 	lds	r24, 0x0196
 756:	90 91 97 01 	lds	r25, 0x0197
 75a:	81 30       	cpi	r24, 0x01	; 1
 75c:	91 05       	cpc	r25, r1
 75e:	09 f4       	brne	.+2      	; 0x762 <buttoncheck+0x266>
 760:	4c c0       	rjmp	.+152    	; 0x7fa <buttoncheck+0x2fe>
 762:	82 30       	cpi	r24, 0x02	; 2
 764:	91 05       	cpc	r25, r1
 766:	09 f4       	brne	.+2      	; 0x76a <buttoncheck+0x26e>
 768:	62 c0       	rjmp	.+196    	; 0x82e <buttoncheck+0x332>
 76a:	89 2b       	or	r24, r25
 76c:	09 f0       	breq	.+2      	; 0x770 <buttoncheck+0x274>
 76e:	e4 c0       	rjmp	.+456    	; 0x938 <buttoncheck+0x43c>
				 {
					 case 0:
					 
						 
					 
					 if(check < 1000 && check > 100)
 770:	80 91 9a 01 	lds	r24, 0x019A
 774:	90 91 9b 01 	lds	r25, 0x019B
 778:	9c 01       	movw	r18, r24
 77a:	25 56       	subi	r18, 0x65	; 101
 77c:	31 09       	sbc	r19, r1
 77e:	23 38       	cpi	r18, 0x83	; 131
 780:	33 40       	sbci	r19, 0x03	; 3
 782:	50 f4       	brcc	.+20     	; 0x798 <buttoncheck+0x29c>
					 {
						 check+= 3000;
 784:	88 54       	subi	r24, 0x48	; 72
 786:	94 4f       	sbci	r25, 0xF4	; 244
 788:	90 93 9b 01 	sts	0x019B, r25
 78c:	80 93 9a 01 	sts	0x019A, r24
						 numbercheck();
 790:	bc dd       	rcall	.-1160   	; 0x30a <numbercheck>
						 wait(1000);
 792:	88 ee       	ldi	r24, 0xE8	; 232
 794:	93 e0       	ldi	r25, 0x03	; 3
 796:	c6 dc       	rcall	.-1652   	; 0x124 <wait>
					 }
					 if(check < 100 && check > 10)
 798:	80 91 9a 01 	lds	r24, 0x019A
 79c:	90 91 9b 01 	lds	r25, 0x019B
 7a0:	9c 01       	movw	r18, r24
 7a2:	2b 50       	subi	r18, 0x0B	; 11
 7a4:	31 09       	sbc	r19, r1
 7a6:	29 35       	cpi	r18, 0x59	; 89
 7a8:	31 05       	cpc	r19, r1
 7aa:	30 f4       	brcc	.+12     	; 0x7b8 <buttoncheck+0x2bc>
					 {
						 check+= 300;
 7ac:	84 5d       	subi	r24, 0xD4	; 212
 7ae:	9e 4f       	sbci	r25, 0xFE	; 254
 7b0:	90 93 9b 01 	sts	0x019B, r25
 7b4:	80 93 9a 01 	sts	0x019A, r24
					 }
					 if(check < 10 && check > 0)
 7b8:	80 91 9a 01 	lds	r24, 0x019A
 7bc:	90 91 9b 01 	lds	r25, 0x019B
 7c0:	9c 01       	movw	r18, r24
 7c2:	21 50       	subi	r18, 0x01	; 1
 7c4:	31 09       	sbc	r19, r1
 7c6:	29 30       	cpi	r18, 0x09	; 9
 7c8:	31 05       	cpc	r19, r1
 7ca:	28 f4       	brcc	.+10     	; 0x7d6 <buttoncheck+0x2da>
					 {
						 check+= 30;
 7cc:	4e 96       	adiw	r24, 0x1e	; 30
 7ce:	90 93 9b 01 	sts	0x019B, r25
 7d2:	80 93 9a 01 	sts	0x019A, r24
					 }
					 if (check == 0)
 7d6:	80 91 9a 01 	lds	r24, 0x019A
 7da:	90 91 9b 01 	lds	r25, 0x019B
 7de:	89 2b       	or	r24, r25
 7e0:	31 f4       	brne	.+12     	; 0x7ee <buttoncheck+0x2f2>
					 {
						
						 check += 3;
 7e2:	83 e0       	ldi	r24, 0x03	; 3
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	90 93 9b 01 	sts	0x019B, r25
 7ea:	80 93 9a 01 	sts	0x019A, r24
					 }
					  display_nummer(check);
 7ee:	80 91 9a 01 	lds	r24, 0x019A
 7f2:	90 91 9b 01 	lds	r25, 0x019B
 7f6:	33 c1       	rjmp	.+614    	; 0xa5e <display_nummer>
					 break;
 7f8:	08 95       	ret
					 case 1:
					 if (place > 35)
 7fa:	80 91 94 01 	lds	r24, 0x0194
 7fe:	90 91 95 01 	lds	r25, 0x0195
 802:	84 97       	sbiw	r24, 0x24	; 36
 804:	34 f0       	brlt	.+12     	; 0x812 <buttoncheck+0x316>
					 {
					 wait(500);
 806:	84 ef       	ldi	r24, 0xF4	; 244
 808:	91 e0       	ldi	r25, 0x01	; 1
 80a:	8c dc       	rcall	.-1768   	; 0x124 <wait>
						 Liftdown(35);
 80c:	83 e2       	ldi	r24, 0x23	; 35
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	23 de       	rcall	.-954    	; 0x458 <Liftdown>
					 }
					 if (place < 35){
 812:	80 91 94 01 	lds	r24, 0x0194
 816:	90 91 95 01 	lds	r25, 0x0195
 81a:	83 97       	sbiw	r24, 0x23	; 35
 81c:	0c f0       	brlt	.+2      	; 0x820 <buttoncheck+0x324>
 81e:	8c c0       	rjmp	.+280    	; 0x938 <buttoncheck+0x43c>
						 wait(500);
 820:	84 ef       	ldi	r24, 0xF4	; 244
 822:	91 e0       	ldi	r25, 0x01	; 1
 824:	7f dc       	rcall	.-1794   	; 0x124 <wait>
						 Liftup(35);
 826:	83 e2       	ldi	r24, 0x23	; 35
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	c4 cd       	rjmp	.-1144   	; 0x3b4 <Liftup>
 82c:	08 95       	ret
					 }
					 break;
					 case 2:
					 smileyniet();
 82e:	09 dd       	rcall	.-1518   	; 0x242 <smileyniet>
					 beep = 0;
 830:	10 92 93 01 	sts	0x0193, r1
 834:	10 92 92 01 	sts	0x0192, r1
					 break;
 838:	08 95       	ret
				}}
				else{
					if (PINF == 0b00010000){
 83a:	80 b1       	in	r24, 0x00	; 0
 83c:	80 31       	cpi	r24, 0x10	; 16
 83e:	09 f0       	breq	.+2      	; 0x842 <buttoncheck+0x346>
 840:	7b c0       	rjmp	.+246    	; 0x938 <buttoncheck+0x43c>
					switch (runningstate)
 842:	80 91 96 01 	lds	r24, 0x0196
 846:	90 91 97 01 	lds	r25, 0x0197
 84a:	81 30       	cpi	r24, 0x01	; 1
 84c:	91 05       	cpc	r25, r1
 84e:	09 f4       	brne	.+2      	; 0x852 <buttoncheck+0x356>
 850:	52 c0       	rjmp	.+164    	; 0x8f6 <buttoncheck+0x3fa>
 852:	82 30       	cpi	r24, 0x02	; 2
 854:	91 05       	cpc	r25, r1
 856:	09 f4       	brne	.+2      	; 0x85a <buttoncheck+0x35e>
 858:	67 c0       	rjmp	.+206    	; 0x928 <buttoncheck+0x42c>
 85a:	89 2b       	or	r24, r25
 85c:	09 f0       	breq	.+2      	; 0x860 <buttoncheck+0x364>
 85e:	6c c0       	rjmp	.+216    	; 0x938 <buttoncheck+0x43c>

						case 0:
						
							
							
							if(check < 1000 && check > 100)
 860:	80 91 9a 01 	lds	r24, 0x019A
 864:	90 91 9b 01 	lds	r25, 0x019B
 868:	9c 01       	movw	r18, r24
 86a:	25 56       	subi	r18, 0x65	; 101
 86c:	31 09       	sbc	r19, r1
 86e:	23 38       	cpi	r18, 0x83	; 131
 870:	33 40       	sbci	r19, 0x03	; 3
 872:	50 f4       	brcc	.+20     	; 0x888 <buttoncheck+0x38c>
							{
								check+= 4000;
 874:	80 56       	subi	r24, 0x60	; 96
 876:	90 4f       	sbci	r25, 0xF0	; 240
 878:	90 93 9b 01 	sts	0x019B, r25
 87c:	80 93 9a 01 	sts	0x019A, r24
								numbercheck();
 880:	44 dd       	rcall	.-1400   	; 0x30a <numbercheck>
								wait(1000);
 882:	88 ee       	ldi	r24, 0xE8	; 232
 884:	93 e0       	ldi	r25, 0x03	; 3
 886:	4e dc       	rcall	.-1892   	; 0x124 <wait>
							}
							if(check < 100 && check > 10)
 888:	80 91 9a 01 	lds	r24, 0x019A
 88c:	90 91 9b 01 	lds	r25, 0x019B
 890:	9c 01       	movw	r18, r24
 892:	2b 50       	subi	r18, 0x0B	; 11
 894:	31 09       	sbc	r19, r1
 896:	29 35       	cpi	r18, 0x59	; 89
 898:	31 05       	cpc	r19, r1
 89a:	30 f4       	brcc	.+12     	; 0x8a8 <buttoncheck+0x3ac>
							{
								check+= 400;
 89c:	80 57       	subi	r24, 0x70	; 112
 89e:	9e 4f       	sbci	r25, 0xFE	; 254
 8a0:	90 93 9b 01 	sts	0x019B, r25
 8a4:	80 93 9a 01 	sts	0x019A, r24
							}
							if(check < 10 && check > 0)
 8a8:	80 91 9a 01 	lds	r24, 0x019A
 8ac:	90 91 9b 01 	lds	r25, 0x019B
 8b0:	9c 01       	movw	r18, r24
 8b2:	21 50       	subi	r18, 0x01	; 1
 8b4:	31 09       	sbc	r19, r1
 8b6:	29 30       	cpi	r18, 0x09	; 9
 8b8:	31 05       	cpc	r19, r1
 8ba:	28 f4       	brcc	.+10     	; 0x8c6 <buttoncheck+0x3ca>
							{
								check+= 40;
 8bc:	88 96       	adiw	r24, 0x28	; 40
 8be:	90 93 9b 01 	sts	0x019B, r25
 8c2:	80 93 9a 01 	sts	0x019A, r24
							}
							if (check == 0)
 8c6:	80 91 9a 01 	lds	r24, 0x019A
 8ca:	90 91 9b 01 	lds	r25, 0x019B
 8ce:	89 2b       	or	r24, r25
 8d0:	61 f4       	brne	.+24     	; 0x8ea <buttoncheck+0x3ee>
							{
								display_nummer(check);
 8d2:	80 e0       	ldi	r24, 0x00	; 0
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	c3 d0       	rcall	.+390    	; 0xa5e <display_nummer>
								check += 4;
 8d8:	80 91 9a 01 	lds	r24, 0x019A
 8dc:	90 91 9b 01 	lds	r25, 0x019B
 8e0:	04 96       	adiw	r24, 0x04	; 4
 8e2:	90 93 9b 01 	sts	0x019B, r25
 8e6:	80 93 9a 01 	sts	0x019A, r24
							}
							
						 display_nummer(check);
 8ea:	80 91 9a 01 	lds	r24, 0x019A
 8ee:	90 91 9b 01 	lds	r25, 0x019B
 8f2:	b5 c0       	rjmp	.+362    	; 0xa5e <display_nummer>
						break;
 8f4:	08 95       	ret
						case 1:
						if (place > 53)
 8f6:	80 91 94 01 	lds	r24, 0x0194
 8fa:	90 91 95 01 	lds	r25, 0x0195
 8fe:	c6 97       	sbiw	r24, 0x36	; 54
 900:	34 f0       	brlt	.+12     	; 0x90e <buttoncheck+0x412>
						{
							wait(500);
 902:	84 ef       	ldi	r24, 0xF4	; 244
 904:	91 e0       	ldi	r25, 0x01	; 1
 906:	0e dc       	rcall	.-2020   	; 0x124 <wait>
							Liftdown(53);
 908:	85 e3       	ldi	r24, 0x35	; 53
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	a5 dd       	rcall	.-1206   	; 0x458 <Liftdown>
						}
						if (place < 53){
 90e:	80 91 94 01 	lds	r24, 0x0194
 912:	90 91 95 01 	lds	r25, 0x0195
 916:	c5 97       	sbiw	r24, 0x35	; 53
 918:	7c f4       	brge	.+30     	; 0x938 <buttoncheck+0x43c>
							wait(500);
 91a:	84 ef       	ldi	r24, 0xF4	; 244
 91c:	91 e0       	ldi	r25, 0x01	; 1
 91e:	02 dc       	rcall	.-2044   	; 0x124 <wait>
							Liftup(53);
 920:	85 e3       	ldi	r24, 0x35	; 53
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	47 cd       	rjmp	.-1394   	; 0x3b4 <Liftup>
 926:	08 95       	ret
						}
						break;
						case 2:
						smileyniet();
 928:	8c dc       	rcall	.-1768   	; 0x242 <smileyniet>
						beep = 1;
 92a:	81 e0       	ldi	r24, 0x01	; 1
 92c:	90 e0       	ldi	r25, 0x00	; 0
 92e:	90 93 93 01 	sts	0x0193, r25
 932:	80 93 92 01 	sts	0x0192, r24
						gobeep();
 936:	01 c0       	rjmp	.+2      	; 0x93a <gobeep>
 938:	08 95       	ret

0000093a <gobeep>:
		twi_stop();
		x++;
	}

}
void gobeep(void){
 93a:	cf 93       	push	r28
	while(beep == 1){
 93c:	80 91 92 01 	lds	r24, 0x0192
 940:	90 91 93 01 	lds	r25, 0x0193
 944:	01 97       	sbiw	r24, 0x01	; 1
 946:	81 f4       	brne	.+32     	; 0x968 <gobeep+0x2e>
	buttoncheck();
	PORTA = 0xff;
 948:	cf ef       	ldi	r28, 0xFF	; 255
	}

}
void gobeep(void){
	while(beep == 1){
	buttoncheck();
 94a:	d8 dd       	rcall	.-1104   	; 0x4fc <buttoncheck>
	PORTA = 0xff;
 94c:	cb bb       	out	0x1b, r28	; 27
	wait(50);
 94e:	82 e3       	ldi	r24, 0x32	; 50
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	e8 db       	rcall	.-2096   	; 0x124 <wait>
	PORTA = 0x00;
 954:	1b ba       	out	0x1b, r1	; 27
	wait(48);
 956:	80 e3       	ldi	r24, 0x30	; 48
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	e4 db       	rcall	.-2104   	; 0x124 <wait>
		x++;
	}

}
void gobeep(void){
	while(beep == 1){
 95c:	80 91 92 01 	lds	r24, 0x0192
 960:	90 91 93 01 	lds	r25, 0x0193
 964:	01 97       	sbiw	r24, 0x01	; 1
 966:	89 f3       	breq	.-30     	; 0x94a <gobeep+0x10>
	wait(50);
	PORTA = 0x00;
	wait(48);
	}

}
 968:	cf 91       	pop	r28
 96a:	08 95       	ret

0000096c <initall>:
	}
}



void initall(){
 96c:	1f 93       	push	r17
 96e:	cf 93       	push	r28
 970:	df 93       	push	r29
	init();
 972:	c4 db       	rcall	.-2168   	; 0xfc <init>
	spi_masterInit(); // Initialize spi module
 974:	31 d0       	rcall	.+98     	; 0x9d8 <spi_masterInit>
	displayDriverInit(); // Initialize display chip
 976:	52 d0       	rcall	.+164    	; 0xa1c <displayDriverInit>
	twi_init();		// Init TWI interface
 978:	e6 db       	rcall	.-2100   	; 0x146 <twi_init>

	// Init HT16K22.
	twi_start();
 97a:	eb db       	rcall	.-2090   	; 0x152 <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 97c:	80 ee       	ldi	r24, 0xE0	; 224
 97e:	90 e0       	ldi	r25, 0x00	; 0
 980:	f1 db       	rcall	.-2078   	; 0x164 <twi_tx>
	twi_tx(0x21);	// Internal osc on
 982:	81 e2       	ldi	r24, 0x21	; 33
 984:	90 e0       	ldi	r25, 0x00	; 0
 986:	ee db       	rcall	.-2084   	; 0x164 <twi_tx>
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 988:	c4 e7       	ldi	r28, 0x74	; 116
 98a:	d0 e0       	ldi	r29, 0x00	; 0
 98c:	14 e9       	ldi	r17, 0x94	; 148
 98e:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C addres + R/W bit
	twi_tx(0x21);	// Internal osc on
	twi_stop();

	twi_start();
 990:	e0 db       	rcall	.-2112   	; 0x152 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 992:	80 ee       	ldi	r24, 0xE0	; 224
 994:	90 e0       	ldi	r25, 0x00	; 0
 996:	e6 db       	rcall	.-2100   	; 0x164 <twi_tx>
	twi_tx(0xA0);	// HT16K33 pins all output
 998:	80 ea       	ldi	r24, 0xA0	; 160
 99a:	90 e0       	ldi	r25, 0x00	; 0
 99c:	e3 db       	rcall	.-2106   	; 0x164 <twi_tx>
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 99e:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0xA0);	// HT16K33 pins all output
	twi_stop();

	twi_start();
 9a0:	d8 db       	rcall	.-2128   	; 0x152 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 9a2:	80 ee       	ldi	r24, 0xE0	; 224
 9a4:	90 e0       	ldi	r25, 0x00	; 0
 9a6:	de db       	rcall	.-2116   	; 0x164 <twi_tx>
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
 9a8:	83 ee       	ldi	r24, 0xE3	; 227
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	db db       	rcall	.-2122   	; 0x164 <twi_tx>
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 9ae:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
	twi_stop();

	twi_start();
 9b0:	d0 db       	rcall	.-2144   	; 0x152 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 9b2:	80 ee       	ldi	r24, 0xE0	; 224
 9b4:	90 e0       	ldi	r25, 0x00	; 0
 9b6:	d6 db       	rcall	.-2132   	; 0x164 <twi_tx>
	twi_tx(0x81);	// Display OFF - Blink On
 9b8:	81 e8       	ldi	r24, 0x81	; 129
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	d3 db       	rcall	.-2138   	; 0x164 <twi_tx>
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 9be:	18 83       	st	Y, r17

	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0x81);	// Display OFF - Blink On
	twi_stop();
}
 9c0:	df 91       	pop	r29
 9c2:	cf 91       	pop	r28
 9c4:	1f 91       	pop	r17
 9c6:	08 95       	ret

000009c8 <main>:

int main( void )
{
	DDRD = 0b11111111;
 9c8:	8f ef       	ldi	r24, 0xFF	; 255
 9ca:	81 bb       	out	0x11, r24	; 17
	DDRC = 0xFF;
 9cc:	84 bb       	out	0x14, r24	; 20
	DDRB=0x01; // Set PB0 pin as output for display select
 9ce:	81 e0       	ldi	r24, 0x01	; 1
 9d0:	87 bb       	out	0x17, r24	; 23
	initall();
 9d2:	cc df       	rcall	.-104    	; 0x96c <initall>
	

	while (1)
	{
	buttoncheck();
 9d4:	93 dd       	rcall	.-1242   	; 0x4fc <buttoncheck>

	}
 9d6:	fe cf       	rjmp	.-4      	; 0x9d4 <main+0xc>

000009d8 <spi_masterInit>:
	 spi_slaveSelect(0); // Select display chip
	 spi_write(adress); // digit adress: (digit place)
	 spi_write(data); // digit value: i (= digit place)
	 spi_slaveDeSelect(0); // Deselect display chip

 }
 9d8:	8f ef       	ldi	r24, 0xFF	; 255
 9da:	87 bb       	out	0x17, r24	; 23
 9dc:	bb 98       	cbi	0x17, 3	; 23
 9de:	c0 9a       	sbi	0x18, 0	; 24
 9e0:	82 e5       	ldi	r24, 0x52	; 82
 9e2:	8d b9       	out	0x0d, r24	; 13
 9e4:	08 95       	ret

000009e6 <spi_write>:
 9e6:	8f b9       	out	0x0f, r24	; 15
 9e8:	77 9b       	sbis	0x0e, 7	; 14
 9ea:	fe cf       	rjmp	.-4      	; 0x9e8 <spi_write+0x2>
 9ec:	08 95       	ret

000009ee <spi_slaveSelect>:
 9ee:	98 b3       	in	r25, 0x18	; 24
 9f0:	21 e0       	ldi	r18, 0x01	; 1
 9f2:	30 e0       	ldi	r19, 0x00	; 0
 9f4:	02 c0       	rjmp	.+4      	; 0x9fa <spi_slaveSelect+0xc>
 9f6:	22 0f       	add	r18, r18
 9f8:	33 1f       	adc	r19, r19
 9fa:	8a 95       	dec	r24
 9fc:	e2 f7       	brpl	.-8      	; 0x9f6 <spi_slaveSelect+0x8>
 9fe:	20 95       	com	r18
 a00:	29 23       	and	r18, r25
 a02:	28 bb       	out	0x18, r18	; 24
 a04:	08 95       	ret

00000a06 <spi_slaveDeSelect>:
 a06:	98 b3       	in	r25, 0x18	; 24
 a08:	21 e0       	ldi	r18, 0x01	; 1
 a0a:	30 e0       	ldi	r19, 0x00	; 0
 a0c:	02 c0       	rjmp	.+4      	; 0xa12 <spi_slaveDeSelect+0xc>
 a0e:	22 0f       	add	r18, r18
 a10:	33 1f       	adc	r19, r19
 a12:	8a 95       	dec	r24
 a14:	e2 f7       	brpl	.-8      	; 0xa0e <spi_slaveDeSelect+0x8>
 a16:	29 2b       	or	r18, r25
 a18:	28 bb       	out	0x18, r18	; 24
 a1a:	08 95       	ret

00000a1c <displayDriverInit>:
 a1c:	80 e0       	ldi	r24, 0x00	; 0
 a1e:	e7 df       	rcall	.-50     	; 0x9ee <spi_slaveSelect>
 a20:	89 e0       	ldi	r24, 0x09	; 9
 a22:	e1 df       	rcall	.-62     	; 0x9e6 <spi_write>
 a24:	8f ef       	ldi	r24, 0xFF	; 255
 a26:	df df       	rcall	.-66     	; 0x9e6 <spi_write>
 a28:	80 e0       	ldi	r24, 0x00	; 0
 a2a:	ed df       	rcall	.-38     	; 0xa06 <spi_slaveDeSelect>
 a2c:	80 e0       	ldi	r24, 0x00	; 0
 a2e:	df df       	rcall	.-66     	; 0x9ee <spi_slaveSelect>
 a30:	8a e0       	ldi	r24, 0x0A	; 10
 a32:	d9 df       	rcall	.-78     	; 0x9e6 <spi_write>
 a34:	8f e0       	ldi	r24, 0x0F	; 15
 a36:	d7 df       	rcall	.-82     	; 0x9e6 <spi_write>
 a38:	80 e0       	ldi	r24, 0x00	; 0
 a3a:	e5 df       	rcall	.-54     	; 0xa06 <spi_slaveDeSelect>
 a3c:	80 e0       	ldi	r24, 0x00	; 0
 a3e:	d7 df       	rcall	.-82     	; 0x9ee <spi_slaveSelect>
 a40:	8b e0       	ldi	r24, 0x0B	; 11
 a42:	d1 df       	rcall	.-94     	; 0x9e6 <spi_write>
 a44:	84 e0       	ldi	r24, 0x04	; 4
 a46:	cf df       	rcall	.-98     	; 0x9e6 <spi_write>
 a48:	80 e0       	ldi	r24, 0x00	; 0
 a4a:	dd df       	rcall	.-70     	; 0xa06 <spi_slaveDeSelect>
 a4c:	80 e0       	ldi	r24, 0x00	; 0
 a4e:	cf df       	rcall	.-98     	; 0x9ee <spi_slaveSelect>
 a50:	8c e0       	ldi	r24, 0x0C	; 12
 a52:	c9 df       	rcall	.-110    	; 0x9e6 <spi_write>
 a54:	81 e0       	ldi	r24, 0x01	; 1
 a56:	c7 df       	rcall	.-114    	; 0x9e6 <spi_write>
 a58:	80 e0       	ldi	r24, 0x00	; 0
 a5a:	d5 cf       	rjmp	.-86     	; 0xa06 <spi_slaveDeSelect>
 a5c:	08 95       	ret

00000a5e <display_nummer>:
 void display_nummer(int data) {
 a5e:	7f 92       	push	r7
 a60:	8f 92       	push	r8
 a62:	9f 92       	push	r9
 a64:	af 92       	push	r10
 a66:	bf 92       	push	r11
 a68:	cf 92       	push	r12
 a6a:	df 92       	push	r13
 a6c:	ef 92       	push	r14
 a6e:	ff 92       	push	r15
 a70:	0f 93       	push	r16
 a72:	1f 93       	push	r17
 a74:	cf 93       	push	r28
 a76:	df 93       	push	r29
 a78:	7c 01       	movw	r14, r24
 a7a:	cc 24       	eor	r12, r12
 a7c:	c3 94       	inc	r12
 a7e:	d1 2c       	mov	r13, r1
		 tempData = data;
		 if(data>0){
			 for(int x = 1; x<i; x++){
				 tempData = tempData/10;
			 }
			 tempData = tempData%10;
 a80:	0a e0       	ldi	r16, 0x0A	; 10
 a82:	10 e0       	ldi	r17, 0x00	; 0
	 int tempData;
	 for (char i =1; i<=4; i++)
	 {
		 tempData = data;
		 if(data>0){
			 for(int x = 1; x<i; x++){
 a84:	98 2e       	mov	r9, r24
 a86:	af 2c       	mov	r10, r15
 a88:	77 24       	eor	r7, r7
 a8a:	73 94       	inc	r7
 a8c:	81 2c       	mov	r8, r1
 a8e:	bc 2c       	mov	r11, r12
 void display_nummer(int data) {
	 int tempData;
	 for (char i =1; i<=4; i++)
	 {
		 tempData = data;
		 if(data>0){
 a90:	1e 14       	cp	r1, r14
 a92:	1f 04       	cpc	r1, r15
 a94:	2c f5       	brge	.+74     	; 0xae0 <display_nummer+0x82>
 a96:	f6 01       	movw	r30, r12
			 for(int x = 1; x<i; x++){
 a98:	82 e0       	ldi	r24, 0x02	; 2
 a9a:	c8 16       	cp	r12, r24
 a9c:	d1 04       	cpc	r13, r1
 a9e:	84 f0       	brlt	.+32     	; 0xac0 <display_nummer+0x62>
 aa0:	d9 2d       	mov	r29, r9
 aa2:	ca 2d       	mov	r28, r10
 aa4:	27 2d       	mov	r18, r7
 aa6:	38 2d       	mov	r19, r8
				 tempData = tempData/10;
 aa8:	8d 2f       	mov	r24, r29
 aaa:	9c 2f       	mov	r25, r28
 aac:	b8 01       	movw	r22, r16
 aae:	2d d0       	rcall	.+90     	; 0xb0a <__divmodhi4>
 ab0:	d6 2f       	mov	r29, r22
 ab2:	c7 2f       	mov	r28, r23
	 int tempData;
	 for (char i =1; i<=4; i++)
	 {
		 tempData = data;
		 if(data>0){
			 for(int x = 1; x<i; x++){
 ab4:	2f 5f       	subi	r18, 0xFF	; 255
 ab6:	3f 4f       	sbci	r19, 0xFF	; 255
 ab8:	2e 17       	cp	r18, r30
 aba:	3f 07       	cpc	r19, r31
 abc:	a9 f7       	brne	.-22     	; 0xaa8 <display_nummer+0x4a>
 abe:	02 c0       	rjmp	.+4      	; 0xac4 <display_nummer+0x66>
 ac0:	d9 2d       	mov	r29, r9
 ac2:	ca 2d       	mov	r28, r10
				 tempData = tempData/10;
			 }
			 tempData = tempData%10;
			 spi_slaveSelect(0); // Select display chip
 ac4:	80 e0       	ldi	r24, 0x00	; 0
 ac6:	93 df       	rcall	.-218    	; 0x9ee <spi_slaveSelect>
			 spi_write(i); // digit adress: (digit place)
 ac8:	8b 2d       	mov	r24, r11
 aca:	8d df       	rcall	.-230    	; 0x9e6 <spi_write>
		 tempData = data;
		 if(data>0){
			 for(int x = 1; x<i; x++){
				 tempData = tempData/10;
			 }
			 tempData = tempData%10;
 acc:	8d 2f       	mov	r24, r29
 ace:	9c 2f       	mov	r25, r28
 ad0:	b8 01       	movw	r22, r16
 ad2:	1b d0       	rcall	.+54     	; 0xb0a <__divmodhi4>
			 spi_slaveSelect(0); // Select display chip
			 spi_write(i); // digit adress: (digit place)
			 spi_write(tempData); // digit value: i (= digit place)
 ad4:	88 df       	rcall	.-240    	; 0x9e6 <spi_write>
			 spi_slaveDeSelect(0); // Deselect display chip
 ad6:	80 e0       	ldi	r24, 0x00	; 0
 ad8:	96 df       	rcall	.-212    	; 0xa06 <spi_slaveDeSelect>
			 wait(1000);
 ada:	88 ee       	ldi	r24, 0xE8	; 232
 adc:	93 e0       	ldi	r25, 0x03	; 3
 ade:	22 db       	rcall	.-2492   	; 0x124 <wait>
 ae0:	8f ef       	ldi	r24, 0xFF	; 255
 ae2:	c8 1a       	sub	r12, r24
 ae4:	d8 0a       	sbc	r13, r24
	 spi_slaveDeSelect(0); // Deselect display chip

 }
 void display_nummer(int data) {
	 int tempData;
	 for (char i =1; i<=4; i++)
 ae6:	85 e0       	ldi	r24, 0x05	; 5
 ae8:	c8 16       	cp	r12, r24
 aea:	d1 04       	cpc	r13, r1
 aec:	81 f6       	brne	.-96     	; 0xa8e <display_nummer+0x30>
			 spi_slaveDeSelect(0); // Deselect display chip
			 wait(1000);
		 }
		 
	 }
 }
 aee:	df 91       	pop	r29
 af0:	cf 91       	pop	r28
 af2:	1f 91       	pop	r17
 af4:	0f 91       	pop	r16
 af6:	ff 90       	pop	r15
 af8:	ef 90       	pop	r14
 afa:	df 90       	pop	r13
 afc:	cf 90       	pop	r12
 afe:	bf 90       	pop	r11
 b00:	af 90       	pop	r10
 b02:	9f 90       	pop	r9
 b04:	8f 90       	pop	r8
 b06:	7f 90       	pop	r7
 b08:	08 95       	ret

00000b0a <__divmodhi4>:
 b0a:	97 fb       	bst	r25, 7
 b0c:	07 2e       	mov	r0, r23
 b0e:	16 f4       	brtc	.+4      	; 0xb14 <__divmodhi4+0xa>
 b10:	00 94       	com	r0
 b12:	06 d0       	rcall	.+12     	; 0xb20 <__divmodhi4_neg1>
 b14:	77 fd       	sbrc	r23, 7
 b16:	08 d0       	rcall	.+16     	; 0xb28 <__divmodhi4_neg2>
 b18:	0b d0       	rcall	.+22     	; 0xb30 <__udivmodhi4>
 b1a:	07 fc       	sbrc	r0, 7
 b1c:	05 d0       	rcall	.+10     	; 0xb28 <__divmodhi4_neg2>
 b1e:	3e f4       	brtc	.+14     	; 0xb2e <__divmodhi4_exit>

00000b20 <__divmodhi4_neg1>:
 b20:	90 95       	com	r25
 b22:	81 95       	neg	r24
 b24:	9f 4f       	sbci	r25, 0xFF	; 255
 b26:	08 95       	ret

00000b28 <__divmodhi4_neg2>:
 b28:	70 95       	com	r23
 b2a:	61 95       	neg	r22
 b2c:	7f 4f       	sbci	r23, 0xFF	; 255

00000b2e <__divmodhi4_exit>:
 b2e:	08 95       	ret

00000b30 <__udivmodhi4>:
 b30:	aa 1b       	sub	r26, r26
 b32:	bb 1b       	sub	r27, r27
 b34:	51 e1       	ldi	r21, 0x11	; 17
 b36:	07 c0       	rjmp	.+14     	; 0xb46 <__udivmodhi4_ep>

00000b38 <__udivmodhi4_loop>:
 b38:	aa 1f       	adc	r26, r26
 b3a:	bb 1f       	adc	r27, r27
 b3c:	a6 17       	cp	r26, r22
 b3e:	b7 07       	cpc	r27, r23
 b40:	10 f0       	brcs	.+4      	; 0xb46 <__udivmodhi4_ep>
 b42:	a6 1b       	sub	r26, r22
 b44:	b7 0b       	sbc	r27, r23

00000b46 <__udivmodhi4_ep>:
 b46:	88 1f       	adc	r24, r24
 b48:	99 1f       	adc	r25, r25
 b4a:	5a 95       	dec	r21
 b4c:	a9 f7       	brne	.-22     	; 0xb38 <__udivmodhi4_loop>
 b4e:	80 95       	com	r24
 b50:	90 95       	com	r25
 b52:	bc 01       	movw	r22, r24
 b54:	cd 01       	movw	r24, r26
 b56:	08 95       	ret

00000b58 <_exit>:
 b58:	f8 94       	cli

00000b5a <__stop_program>:
 b5a:	ff cf       	rjmp	.-2      	; 0xb5a <__stop_program>
