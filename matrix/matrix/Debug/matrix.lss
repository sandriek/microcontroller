
matrix.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000002a4  00000318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000360  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010a9  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000549  00000000  00000000  0000155d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008fc  00000000  00000000  00001aa6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000304  00000000  00000000  000023a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037f  00000000  00000000  000026a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000899  00000000  00000000  00002a27  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000178  00000000  00000000  000032c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ea       	ldi	r30, 0xA4	; 164
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 31       	cpi	r26, 0x18	; 24
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	ab d0       	rcall	.+342    	; 0x20a <main>
  b4:	f5 c0       	rjmp	.+490    	; 0x2a0 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <lcd_command>:
  b8:	98 2f       	mov	r25, r24
  ba:	90 7f       	andi	r25, 0xF0	; 240
  bc:	95 bb       	out	0x15, r25	; 21
  be:	ab 9a       	sbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	e3 ed       	ldi	r30, 0xD3	; 211
  c2:	f0 e3       	ldi	r31, 0x30	; 48
  c4:	31 97       	sbiw	r30, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <lcd_command+0xc>
  c8:	00 c0       	rjmp	.+0      	; 0xca <lcd_command+0x12>
  ca:	00 00       	nop
  cc:	94 e0       	ldi	r25, 0x04	; 4
  ce:	95 bb       	out	0x15, r25	; 21
  d0:	f0 e1       	ldi	r31, 0x10	; 16
  d2:	8f 9f       	mul	r24, r31
  d4:	c0 01       	movw	r24, r0
  d6:	11 24       	eor	r1, r1
  d8:	85 bb       	out	0x15, r24	; 21
  da:	ab 9a       	sbi	0x15, 3	; 21
  dc:	83 ed       	ldi	r24, 0xD3	; 211
  de:	90 e3       	ldi	r25, 0x30	; 48
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <lcd_command+0x28>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <lcd_command+0x2e>
  e6:	00 00       	nop
  e8:	15 ba       	out	0x15, r1	; 21
  ea:	08 95       	ret

000000ec <init>:
  ec:	82 e0       	ldi	r24, 0x02	; 2
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	e3 df       	rcall	.-58     	; 0xb8 <lcd_command>
  f2:	88 e2       	ldi	r24, 0x28	; 40
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	e0 df       	rcall	.-64     	; 0xb8 <lcd_command>
  f8:	8c e0       	ldi	r24, 0x0C	; 12
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	dd df       	rcall	.-70     	; 0xb8 <lcd_command>
  fe:	86 e0       	ldi	r24, 0x06	; 6
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	da df       	rcall	.-76     	; 0xb8 <lcd_command>
 104:	80 e8       	ldi	r24, 0x80	; 128
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	d7 cf       	rjmp	.-82     	; 0xb8 <lcd_command>
 10a:	08 95       	ret

0000010c <twi_init>:
		twi_tx(0xE0);	// Display I2C addres + R/W bit
		twi_tx(adres);	// Address
		twi_tx(0);	// data
		twi_stop();
	}
}
 10c:	10 92 71 00 	sts	0x0071, r1
 110:	80 e2       	ldi	r24, 0x20	; 32
 112:	80 93 70 00 	sts	0x0070, r24
 116:	08 95       	ret

00000118 <twi_start>:
 118:	84 ea       	ldi	r24, 0xA4	; 164
 11a:	80 93 74 00 	sts	0x0074, r24
 11e:	e4 e7       	ldi	r30, 0x74	; 116
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	88 23       	and	r24, r24
 126:	ec f7       	brge	.-6      	; 0x122 <twi_start+0xa>
 128:	08 95       	ret

0000012a <twi_tx>:
 12a:	80 93 73 00 	sts	0x0073, r24
 12e:	84 e8       	ldi	r24, 0x84	; 132
 130:	80 93 74 00 	sts	0x0074, r24
 134:	e4 e7       	ldi	r30, 0x74	; 116
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	88 23       	and	r24, r24
 13c:	ec f7       	brge	.-6      	; 0x138 <twi_tx+0xe>
 13e:	08 95       	ret

00000140 <smileyblij>:
 140:	af 92       	push	r10
 142:	bf 92       	push	r11
 144:	cf 92       	push	r12
 146:	df 92       	push	r13
 148:	ff 92       	push	r15
 14a:	0f 93       	push	r16
 14c:	1f 93       	push	r17
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	00 e0       	ldi	r16, 0x00	; 0
 154:	11 e0       	ldi	r17, 0x01	; 1
 156:	0f 2e       	mov	r0, r31
 158:	f8 e0       	ldi	r31, 0x08	; 8
 15a:	af 2e       	mov	r10, r31
 15c:	f1 e0       	ldi	r31, 0x01	; 1
 15e:	bf 2e       	mov	r11, r31
 160:	f0 2d       	mov	r31, r0
 162:	c0 e0       	ldi	r28, 0x00	; 0
 164:	d0 e0       	ldi	r29, 0x00	; 0
 166:	0f 2e       	mov	r0, r31
 168:	f4 e7       	ldi	r31, 0x74	; 116
 16a:	cf 2e       	mov	r12, r31
 16c:	d1 2c       	mov	r13, r1
 16e:	f0 2d       	mov	r31, r0
 170:	0f 2e       	mov	r0, r31
 172:	f4 e9       	ldi	r31, 0x94	; 148
 174:	ff 2e       	mov	r15, r31
 176:	f0 2d       	mov	r31, r0
 178:	cf df       	rcall	.-98     	; 0x118 <twi_start>
 17a:	80 ee       	ldi	r24, 0xE0	; 224
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	d5 df       	rcall	.-86     	; 0x12a <twi_tx>
 180:	ce 01       	movw	r24, r28
 182:	d3 df       	rcall	.-90     	; 0x12a <twi_tx>
 184:	f8 01       	movw	r30, r16
 186:	81 91       	ld	r24, Z+
 188:	8f 01       	movw	r16, r30
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	ce df       	rcall	.-100    	; 0x12a <twi_tx>
 18e:	f6 01       	movw	r30, r12
 190:	f0 82       	st	Z, r15
 192:	22 96       	adiw	r28, 0x02	; 2
 194:	0a 15       	cp	r16, r10
 196:	1b 05       	cpc	r17, r11
 198:	79 f7       	brne	.-34     	; 0x178 <smileyblij+0x38>
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	1f 91       	pop	r17
 1a0:	0f 91       	pop	r16
 1a2:	ff 90       	pop	r15
 1a4:	df 90       	pop	r13
 1a6:	cf 90       	pop	r12
 1a8:	bf 90       	pop	r11
 1aa:	af 90       	pop	r10
 1ac:	08 95       	ret

000001ae <initall>:

void initall()
{
 1ae:	1f 93       	push	r17
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
	init();
 1b4:	9b df       	rcall	.-202    	; 0xec <init>
	spi_masterInit(); // Initialize spi module
 1b6:	31 d0       	rcall	.+98     	; 0x21a <spi_masterInit>
	displayDriverInit(); // Initialize display chip
 1b8:	52 d0       	rcall	.+164    	; 0x25e <displayDriverInit>
	twi_init();		// Init TWI interface
 1ba:	a8 df       	rcall	.-176    	; 0x10c <twi_init>

	// Init HT16K22.
	twi_start();
 1bc:	ad df       	rcall	.-166    	; 0x118 <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 1be:	80 ee       	ldi	r24, 0xE0	; 224
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	b3 df       	rcall	.-154    	; 0x12a <twi_tx>
	twi_tx(0x21);	// Internal osc on
 1c4:	81 e2       	ldi	r24, 0x21	; 33
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	b0 df       	rcall	.-160    	; 0x12a <twi_tx>
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 1ca:	c4 e7       	ldi	r28, 0x74	; 116
 1cc:	d0 e0       	ldi	r29, 0x00	; 0
 1ce:	14 e9       	ldi	r17, 0x94	; 148
 1d0:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C addres + R/W bit
	twi_tx(0x21);	// Internal osc on
	twi_stop();

	twi_start();
 1d2:	a2 df       	rcall	.-188    	; 0x118 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 1d4:	80 ee       	ldi	r24, 0xE0	; 224
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	a8 df       	rcall	.-176    	; 0x12a <twi_tx>
	twi_tx(0xA0);	// HT16K33 pins all output
 1da:	80 ea       	ldi	r24, 0xA0	; 160
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	a5 df       	rcall	.-182    	; 0x12a <twi_tx>
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 1e0:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0xA0);	// HT16K33 pins all output
	twi_stop();

	twi_start();
 1e2:	9a df       	rcall	.-204    	; 0x118 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 1e4:	80 ee       	ldi	r24, 0xE0	; 224
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	a0 df       	rcall	.-192    	; 0x12a <twi_tx>
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
 1ea:	83 ee       	ldi	r24, 0xE3	; 227
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	9d df       	rcall	.-198    	; 0x12a <twi_tx>
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 1f0:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
	twi_stop();

	twi_start();
 1f2:	92 df       	rcall	.-220    	; 0x118 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 1f4:	80 ee       	ldi	r24, 0xE0	; 224
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	98 df       	rcall	.-208    	; 0x12a <twi_tx>
	twi_tx(0x81);	// Display OFF - Blink On
 1fa:	81 e8       	ldi	r24, 0x81	; 129
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	95 df       	rcall	.-214    	; 0x12a <twi_tx>
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 200:	18 83       	st	Y, r17

	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0x81);	// Display OFF - Blink On
	twi_stop();
}
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	1f 91       	pop	r17
 208:	08 95       	ret

0000020a <main>:

void main( void )
{
	DDRD = 0b11111111;
 20a:	8f ef       	ldi	r24, 0xFF	; 255
 20c:	81 bb       	out	0x11, r24	; 17
	DDRC = 0xFF;
 20e:	84 bb       	out	0x14, r24	; 20
	DDRB=0x01; // Set PB0 pin as output for display select
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	87 bb       	out	0x17, r24	; 23
	initall();
 214:	cc df       	rcall	.-104    	; 0x1ae <initall>
	
	while (1)
	{
		smileyblij();
 216:	94 df       	rcall	.-216    	; 0x140 <smileyblij>
	}
 218:	fe cf       	rjmp	.-4      	; 0x216 <main+0xc>

0000021a <spi_masterInit>:
 21a:	8f ef       	ldi	r24, 0xFF	; 255
 21c:	87 bb       	out	0x17, r24	; 23
 21e:	bb 98       	cbi	0x17, 3	; 23
 220:	c0 9a       	sbi	0x18, 0	; 24
 222:	82 e5       	ldi	r24, 0x52	; 82
 224:	8d b9       	out	0x0d, r24	; 13
 226:	08 95       	ret

00000228 <spi_write>:
 228:	8f b9       	out	0x0f, r24	; 15
 22a:	77 9b       	sbis	0x0e, 7	; 14
 22c:	fe cf       	rjmp	.-4      	; 0x22a <spi_write+0x2>
 22e:	08 95       	ret

00000230 <spi_slaveSelect>:
 230:	98 b3       	in	r25, 0x18	; 24
 232:	21 e0       	ldi	r18, 0x01	; 1
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	02 c0       	rjmp	.+4      	; 0x23c <spi_slaveSelect+0xc>
 238:	22 0f       	add	r18, r18
 23a:	33 1f       	adc	r19, r19
 23c:	8a 95       	dec	r24
 23e:	e2 f7       	brpl	.-8      	; 0x238 <spi_slaveSelect+0x8>
 240:	20 95       	com	r18
 242:	29 23       	and	r18, r25
 244:	28 bb       	out	0x18, r18	; 24
 246:	08 95       	ret

00000248 <spi_slaveDeSelect>:
 248:	98 b3       	in	r25, 0x18	; 24
 24a:	21 e0       	ldi	r18, 0x01	; 1
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	02 c0       	rjmp	.+4      	; 0x254 <spi_slaveDeSelect+0xc>
 250:	22 0f       	add	r18, r18
 252:	33 1f       	adc	r19, r19
 254:	8a 95       	dec	r24
 256:	e2 f7       	brpl	.-8      	; 0x250 <spi_slaveDeSelect+0x8>
 258:	29 2b       	or	r18, r25
 25a:	28 bb       	out	0x18, r18	; 24
 25c:	08 95       	ret

0000025e <displayDriverInit>:
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	e7 df       	rcall	.-50     	; 0x230 <spi_slaveSelect>
 262:	89 e0       	ldi	r24, 0x09	; 9
 264:	e1 df       	rcall	.-62     	; 0x228 <spi_write>
 266:	8f ef       	ldi	r24, 0xFF	; 255
 268:	df df       	rcall	.-66     	; 0x228 <spi_write>
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	ed df       	rcall	.-38     	; 0x248 <spi_slaveDeSelect>
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	df df       	rcall	.-66     	; 0x230 <spi_slaveSelect>
 272:	8a e0       	ldi	r24, 0x0A	; 10
 274:	d9 df       	rcall	.-78     	; 0x228 <spi_write>
 276:	8f e0       	ldi	r24, 0x0F	; 15
 278:	d7 df       	rcall	.-82     	; 0x228 <spi_write>
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	e5 df       	rcall	.-54     	; 0x248 <spi_slaveDeSelect>
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	d7 df       	rcall	.-82     	; 0x230 <spi_slaveSelect>
 282:	8b e0       	ldi	r24, 0x0B	; 11
 284:	d1 df       	rcall	.-94     	; 0x228 <spi_write>
 286:	84 e0       	ldi	r24, 0x04	; 4
 288:	cf df       	rcall	.-98     	; 0x228 <spi_write>
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	dd df       	rcall	.-70     	; 0x248 <spi_slaveDeSelect>
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	cf df       	rcall	.-98     	; 0x230 <spi_slaveSelect>
 292:	8c e0       	ldi	r24, 0x0C	; 12
 294:	c9 df       	rcall	.-110    	; 0x228 <spi_write>
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	c7 df       	rcall	.-114    	; 0x228 <spi_write>
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	d5 cf       	rjmp	.-86     	; 0x248 <spi_slaveDeSelect>
 29e:	08 95       	ret

000002a0 <_exit>:
 2a0:	f8 94       	cli

000002a2 <__stop_program>:
 2a2:	ff cf       	rjmp	.-2      	; 0x2a2 <__stop_program>
