
matrix.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000039a  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000175  00000000  00000000  0000060e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b5  00000000  00000000  00000783  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00000a38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001b5  00000000  00000000  00000aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000097  00000000  00000000  00000c61  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00000cf8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	2d d0       	rcall	.+90     	; 0xf4 <main>
  9a:	66 c0       	rjmp	.+204    	; 0x168 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <twi_init>:
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
  9e:	10 92 71 00 	sts	0x0071, r1
  a2:	80 e2       	ldi	r24, 0x20	; 32
  a4:	80 93 70 00 	sts	0x0070, r24
  a8:	08 95       	ret

000000aa <twi_start>:
  aa:	84 ea       	ldi	r24, 0xA4	; 164
  ac:	80 93 74 00 	sts	0x0074, r24
  b0:	e4 e7       	ldi	r30, 0x74	; 116
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	88 23       	and	r24, r24
  b8:	ec f7       	brge	.-6      	; 0xb4 <twi_start+0xa>
  ba:	08 95       	ret

000000bc <twi_tx>:
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWDR = data;
  bc:	80 93 73 00 	sts	0x0073, r24
	TWCR = (0x80 | 0x04);
  c0:	84 e8       	ldi	r24, 0x84	; 132
  c2:	80 93 74 00 	sts	0x0074, r24
	while( 0 == (TWCR & 0x80) );
  c6:	e4 e7       	ldi	r30, 0x74	; 116
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	88 23       	and	r24, r24
  ce:	ec f7       	brge	.-6      	; 0xca <twi_tx+0xe>
}
  d0:	08 95       	ret

000000d2 <wait>:
				clock value is set. This is used by _delay_ms inside
				util/delay.h
Version :    	DMK, Initial code
*******************************************************************/
{
	for (int i=0; i<ms; i++)
  d2:	18 16       	cp	r1, r24
  d4:	19 06       	cpc	r1, r25
  d6:	6c f4       	brge	.+26     	; 0xf2 <wait+0x20>
  d8:	20 e0       	ldi	r18, 0x00	; 0
  da:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	e9 ef       	ldi	r30, 0xF9	; 249
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	31 97       	sbiw	r30, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <wait+0xe>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <wait+0x14>
  e6:	00 00       	nop
  e8:	2f 5f       	subi	r18, 0xFF	; 255
  ea:	3f 4f       	sbci	r19, 0xFF	; 255
  ec:	28 17       	cp	r18, r24
  ee:	39 07       	cpc	r19, r25
  f0:	a9 f7       	brne	.-22     	; 0xdc <wait+0xa>
  f2:	08 95       	ret

000000f4 <main>:
outputs:	
notes:			Looping forever, trashing the HT16K33
Version :    	DMK, Initial code
*******************************************************************/
{
	DDRD = 0xFF;
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	81 bb       	out	0x11, r24	; 17
	twi_init();		// Init TWI interface
  f8:	d2 df       	rcall	.-92     	; 0x9e <twi_init>

	// Init HT16K22. Page 32 datasheet
	twi_start();
  fa:	d7 df       	rcall	.-82     	; 0xaa <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
  fc:	80 ee       	ldi	r24, 0xE0	; 224
  fe:	de df       	rcall	.-68     	; 0xbc <twi_tx>
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
 100:	81 e2       	ldi	r24, 0x21	; 33
 102:	dc df       	rcall	.-72     	; 0xbc <twi_tx>
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 104:	c4 e7       	ldi	r28, 0x74	; 116
 106:	d0 e0       	ldi	r29, 0x00	; 0
 108:	14 e9       	ldi	r17, 0x94	; 148
 10a:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C addres + R/W bit
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
	twi_stop();

	twi_start();
 10c:	ce df       	rcall	.-100    	; 0xaa <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 10e:	80 ee       	ldi	r24, 0xE0	; 224
 110:	d5 df       	rcall	.-86     	; 0xbc <twi_tx>
	twi_tx(0xA0);	// HT16K33 pins all output
 112:	80 ea       	ldi	r24, 0xA0	; 160
 114:	d3 df       	rcall	.-90     	; 0xbc <twi_tx>
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 116:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0xA0);	// HT16K33 pins all output
	twi_stop();

	twi_start();
 118:	c8 df       	rcall	.-112    	; 0xaa <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 11a:	80 ee       	ldi	r24, 0xE0	; 224
 11c:	cf df       	rcall	.-98     	; 0xbc <twi_tx>
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
 11e:	83 ee       	ldi	r24, 0xE3	; 227
 120:	cd df       	rcall	.-102    	; 0xbc <twi_tx>
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 122:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
	twi_stop();

	twi_start();
 124:	c2 df       	rcall	.-124    	; 0xaa <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 126:	80 ee       	ldi	r24, 0xE0	; 224
 128:	c9 df       	rcall	.-110    	; 0xbc <twi_tx>
	twi_tx(0x81);	// Display OFF - Blink On
 12a:	81 e8       	ldi	r24, 0x81	; 129
 12c:	c7 df       	rcall	.-114    	; 0xbc <twi_tx>
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 12e:	18 83       	st	Y, r17
 130:	04 e7       	ldi	r16, 0x74	; 116
 132:	10 e0       	ldi	r17, 0x00	; 0
 134:	c4 e9       	ldi	r28, 0x94	; 148
	twi_tx(0x81);	// Display OFF - Blink On
	twi_stop();

	while (1)
	{
		twi_start();
 136:	b9 df       	rcall	.-142    	; 0xaa <twi_start>
		twi_tx(0xE0);	// Display I2C addres + R/W bit
 138:	80 ee       	ldi	r24, 0xE0	; 224
 13a:	c0 df       	rcall	.-128    	; 0xbc <twi_tx>
		twi_tx(0x00);	// Address
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	be df       	rcall	.-132    	; 0xbc <twi_tx>
		twi_tx(0x12);	// data
 140:	82 e1       	ldi	r24, 0x12	; 18
 142:	bc df       	rcall	.-136    	; 0xbc <twi_tx>
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 144:	f8 01       	movw	r30, r16
 146:	c0 83       	st	Z, r28
		twi_tx(0xE0);	// Display I2C addres + R/W bit
		twi_tx(0x00);	// Address
		twi_tx(0x12);	// data
		twi_stop();

		wait(500);	
 148:	84 ef       	ldi	r24, 0xF4	; 244
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	c2 df       	rcall	.-124    	; 0xd2 <wait>

		twi_start();
 14e:	ad df       	rcall	.-166    	; 0xaa <twi_start>
		twi_tx(0xE0);	// Display I2C addres + R/W bit
 150:	80 ee       	ldi	r24, 0xE0	; 224
 152:	b4 df       	rcall	.-152    	; 0xbc <twi_tx>
		twi_tx(0x00);	// Address
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	b2 df       	rcall	.-156    	; 0xbc <twi_tx>
		twi_tx(0x00);	// data
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	b0 df       	rcall	.-160    	; 0xbc <twi_tx>
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 15c:	f8 01       	movw	r30, r16
 15e:	c0 83       	st	Z, r28
		twi_tx(0xE0);	// Display I2C addres + R/W bit
		twi_tx(0x00);	// Address
		twi_tx(0x00);	// data
		twi_stop();	

		wait(500);
 160:	84 ef       	ldi	r24, 0xF4	; 244
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	b6 df       	rcall	.-148    	; 0xd2 <wait>
	}
 166:	e7 cf       	rjmp	.-50     	; 0x136 <main+0x42>

00000168 <_exit>:
 168:	f8 94       	cli

0000016a <__stop_program>:
 16a:	ff cf       	rjmp	.-2      	; 0x16a <__stop_program>
