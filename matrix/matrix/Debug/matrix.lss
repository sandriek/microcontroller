
matrix.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  0000045c  000004d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000045c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000520  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001293  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000054a  00000000  00000000  000018ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000962  00000000  00000000  00001e39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000298  00000000  00000000  0000279c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000321  00000000  00000000  00002a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000996  00000000  00000000  00002d55  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000190  00000000  00000000  000036eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e5       	ldi	r30, 0x5C	; 92
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 32       	cpi	r26, 0x20	; 32
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	87 d1       	rcall	.+782    	; 0x3c2 <main>
  b4:	d1 c1       	rjmp	.+930    	; 0x458 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <lcd_command>:
 void clear(){
 lcd_command(0x01);
 }
 void lcd_command ( unsigned char dat )
 {
	 PORTC = dat & 0xF0; 
  b8:	98 2f       	mov	r25, r24
  ba:	90 7f       	andi	r25, 0xF0	; 240
  bc:	95 bb       	out	0x15, r25	; 21
	 PORTC = PORTC | 0x08; 
  be:	ab 9a       	sbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	e3 ed       	ldi	r30, 0xD3	; 211
  c2:	f0 e3       	ldi	r31, 0x30	; 48
  c4:	31 97       	sbiw	r30, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <lcd_command+0xc>
  c8:	00 c0       	rjmp	.+0      	; 0xca <lcd_command+0x12>
  ca:	00 00       	nop
	 _delay_ms(50);
	 PORTC = 0x04; 
  cc:	94 e0       	ldi	r25, 0x04	; 4
  ce:	95 bb       	out	0x15, r25	; 21
	 PORTC = (dat & 0x0F) << 4; 
  d0:	f0 e1       	ldi	r31, 0x10	; 16
  d2:	8f 9f       	mul	r24, r31
  d4:	c0 01       	movw	r24, r0
  d6:	11 24       	eor	r1, r1
  d8:	85 bb       	out	0x15, r24	; 21
	 PORTC = PORTC | 0x08;
  da:	ab 9a       	sbi	0x15, 3	; 21
  dc:	83 ed       	ldi	r24, 0xD3	; 211
  de:	90 e3       	ldi	r25, 0x30	; 48
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <lcd_command+0x28>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <lcd_command+0x2e>
  e6:	00 00       	nop
	 _delay_ms(50); 
	 PORTC = 0x00; 
  e8:	15 ba       	out	0x15, r1	; 21
  ea:	08 95       	ret

000000ec <init>:
 #include "lcd.h"
int i =1;

 void init()
 {
 lcd_command( 0x02 );
  ec:	82 e0       	ldi	r24, 0x02	; 2
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	e3 df       	rcall	.-58     	; 0xb8 <lcd_command>
 lcd_command( 0x28 ); 
  f2:	88 e2       	ldi	r24, 0x28	; 40
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	e0 df       	rcall	.-64     	; 0xb8 <lcd_command>
 lcd_command( 0x0C );
  f8:	8c e0       	ldi	r24, 0x0C	; 12
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	dd df       	rcall	.-70     	; 0xb8 <lcd_command>
 lcd_command( 0x06 );
  fe:	86 e0       	ldi	r24, 0x06	; 6
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	da df       	rcall	.-76     	; 0xb8 <lcd_command>
 lcd_command( 0x80 );
 104:	80 e8       	ldi	r24, 0x80	; 128
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	d7 cf       	rjmp	.-82     	; 0xb8 <lcd_command>
 10a:	08 95       	ret

0000010c <wait>:
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 10c:	18 16       	cp	r1, r24
 10e:	19 06       	cpc	r1, r25
 110:	6c f4       	brge	.+26     	; 0x12c <wait+0x20>
 112:	20 e0       	ldi	r18, 0x00	; 0
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	e9 ef       	ldi	r30, 0xF9	; 249
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	31 97       	sbiw	r30, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <wait+0xe>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <wait+0x14>
 120:	00 00       	nop
 122:	2f 5f       	subi	r18, 0xFF	; 255
 124:	3f 4f       	sbci	r19, 0xFF	; 255
 126:	28 17       	cp	r18, r24
 128:	39 07       	cpc	r19, r25
 12a:	a9 f7       	brne	.-22     	; 0x116 <wait+0xa>
 12c:	08 95       	ret

0000012e <twi_init>:
 12e:	10 92 71 00 	sts	0x0071, r1
 132:	80 e2       	ldi	r24, 0x20	; 32
 134:	80 93 70 00 	sts	0x0070, r24
 138:	08 95       	ret

0000013a <twi_start>:
 13a:	84 ea       	ldi	r24, 0xA4	; 164
 13c:	80 93 74 00 	sts	0x0074, r24
 140:	e4 e7       	ldi	r30, 0x74	; 116
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	88 23       	and	r24, r24
 148:	ec f7       	brge	.-6      	; 0x144 <twi_start+0xa>
 14a:	08 95       	ret

0000014c <twi_tx>:
}

void twi_tx(unsigned char data)
{
	TWDR = data;
 14c:	80 93 73 00 	sts	0x0073, r24
	TWCR = (0x80 | 0x04);
 150:	84 e8       	ldi	r24, 0x84	; 132
 152:	80 93 74 00 	sts	0x0074, r24
	while( 0 == (TWCR & 0x80) );
 156:	e4 e7       	ldi	r30, 0x74	; 116
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	88 23       	and	r24, r24
 15e:	ec f7       	brge	.-6      	; 0x15a <twi_tx+0xe>
 160:	08 95       	ret

00000162 <PacmanAnimatie>:
	//mond dicht
	{30}, {63}, {253}, {255}, {255}, {255}, {63}, {30}
};

void PacmanAnimatie()
{
 162:	2f 92       	push	r2
 164:	3f 92       	push	r3
 166:	4f 92       	push	r4
 168:	5f 92       	push	r5
 16a:	6f 92       	push	r6
 16c:	7f 92       	push	r7
 16e:	9f 92       	push	r9
 170:	af 92       	push	r10
 172:	bf 92       	push	r11
 174:	cf 92       	push	r12
 176:	df 92       	push	r13
 178:	ef 92       	push	r14
 17a:	ff 92       	push	r15
 17c:	0f 93       	push	r16
 17e:	1f 93       	push	r17
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	ee 24       	eor	r14, r14
 186:	e3 94       	inc	r14
 188:	f1 2c       	mov	r15, r1
	for (int i = 0; i < 5; i ++)
	{
		switch (i)
 18a:	21 2c       	mov	r2, r1
 18c:	91 2c       	mov	r9, r1
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 18e:	04 e7       	ldi	r16, 0x74	; 116
 190:	10 e0       	ldi	r17, 0x00	; 0
 192:	0f 2e       	mov	r0, r31
 194:	f4 e9       	ldi	r31, 0x94	; 148
 196:	3f 2e       	mov	r3, r31
 198:	f0 2d       	mov	r31, r0
 19a:	0f 2e       	mov	r0, r31
 19c:	f8 e1       	ldi	r31, 0x18	; 24
 19e:	6f 2e       	mov	r6, r31
 1a0:	f1 e0       	ldi	r31, 0x01	; 1
 1a2:	7f 2e       	mov	r7, r31
 1a4:	f0 2d       	mov	r31, r0
 1a6:	0f 2e       	mov	r0, r31
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	4f 2e       	mov	r4, r31
 1ac:	f1 e0       	ldi	r31, 0x01	; 1
 1ae:	5f 2e       	mov	r5, r31
 1b0:	f0 2d       	mov	r31, r0
 1b2:	0f 2e       	mov	r0, r31
 1b4:	f8 e0       	ldi	r31, 0x08	; 8
 1b6:	cf 2e       	mov	r12, r31
 1b8:	f1 e0       	ldi	r31, 0x01	; 1
 1ba:	df 2e       	mov	r13, r31
 1bc:	f0 2d       	mov	r31, r0
 1be:	03 c0       	rjmp	.+6      	; 0x1c6 <PacmanAnimatie+0x64>
 1c0:	8f ef       	ldi	r24, 0xFF	; 255
 1c2:	e8 1a       	sub	r14, r24
 1c4:	f8 0a       	sbc	r15, r24
 1c6:	c7 01       	movw	r24, r14
 1c8:	01 97       	sbiw	r24, 0x01	; 1

void PacmanAnimatie()
{
	for (int i = 0; i < 5; i ++)
	{
		switch (i)
 1ca:	82 30       	cpi	r24, 0x02	; 2
 1cc:	91 05       	cpc	r25, r1
 1ce:	09 f4       	brne	.+2      	; 0x1d2 <PacmanAnimatie+0x70>
 1d0:	3a c0       	rjmp	.+116    	; 0x246 <PacmanAnimatie+0xe4>
 1d2:	2c f4       	brge	.+10     	; 0x1de <PacmanAnimatie+0x7c>
 1d4:	00 97       	sbiw	r24, 0x00	; 0
 1d6:	69 f0       	breq	.+26     	; 0x1f2 <PacmanAnimatie+0x90>
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	01 f1       	breq	.+64     	; 0x21c <PacmanAnimatie+0xba>
 1dc:	a1 c0       	rjmp	.+322    	; 0x320 <PacmanAnimatie+0x1be>
 1de:	84 30       	cpi	r24, 0x04	; 4
 1e0:	91 05       	cpc	r25, r1
 1e2:	09 f4       	brne	.+2      	; 0x1e6 <PacmanAnimatie+0x84>
 1e4:	5f c0       	rjmp	.+190    	; 0x2a4 <PacmanAnimatie+0x142>
 1e6:	0c f4       	brge	.+2      	; 0x1ea <PacmanAnimatie+0x88>
 1e8:	48 c0       	rjmp	.+144    	; 0x27a <PacmanAnimatie+0x118>
 1ea:	05 97       	sbiw	r24, 0x05	; 5
 1ec:	09 f4       	brne	.+2      	; 0x1f0 <PacmanAnimatie+0x8e>
 1ee:	79 c0       	rjmp	.+242    	; 0x2e2 <PacmanAnimatie+0x180>
 1f0:	97 c0       	rjmp	.+302    	; 0x320 <PacmanAnimatie+0x1be>
 1f2:	52 01       	movw	r10, r4
 1f4:	c2 2d       	mov	r28, r2
 1f6:	d9 2d       	mov	r29, r9
			case 0: 
				{
					int x = 0;
					for (int adres = 0; adres <= 14; adres += 2)
					{
						twi_start();
 1f8:	a0 df       	rcall	.-192    	; 0x13a <twi_start>
						twi_tx(0xE0);	// Display I2C addres + R/W bit
 1fa:	80 ee       	ldi	r24, 0xE0	; 224
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	a6 df       	rcall	.-180    	; 0x14c <twi_tx>
						twi_tx(adres);	// Address
 200:	ce 01       	movw	r24, r28
 202:	a4 df       	rcall	.-184    	; 0x14c <twi_tx>
						twi_tx(pacman[x].data);	// data
 204:	f5 01       	movw	r30, r10
 206:	81 91       	ld	r24, Z+
 208:	5f 01       	movw	r10, r30
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	9f df       	rcall	.-194    	; 0x14c <twi_tx>
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 20e:	f8 01       	movw	r30, r16
 210:	30 82       	st	Z, r3
		switch (i)
		{
			case 0: 
				{
					int x = 0;
					for (int adres = 0; adres <= 14; adres += 2)
 212:	22 96       	adiw	r28, 0x02	; 2
 214:	ac 14       	cp	r10, r12
 216:	bd 04       	cpc	r11, r13
 218:	79 f7       	brne	.-34     	; 0x1f8 <PacmanAnimatie+0x96>
 21a:	8f c0       	rjmp	.+286    	; 0x33a <PacmanAnimatie+0x1d8>
 21c:	56 01       	movw	r10, r12

void PacmanAnimatie()
{
	for (int i = 0; i < 5; i ++)
	{
		switch (i)
 21e:	c2 2d       	mov	r28, r2
 220:	d9 2d       	mov	r29, r9
			case 1:
			{
				int x = 8;
				for (int adres = 0; adres <= 14; adres += 2)
				{
					twi_start();
 222:	8b df       	rcall	.-234    	; 0x13a <twi_start>
					twi_tx(0xE0);	// Display I2C addres + R/W bit
 224:	80 ee       	ldi	r24, 0xE0	; 224
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	91 df       	rcall	.-222    	; 0x14c <twi_tx>
					twi_tx(adres);	// Address
 22a:	ce 01       	movw	r24, r28
 22c:	8f df       	rcall	.-226    	; 0x14c <twi_tx>
					twi_tx(pacman[x].data);	// data
 22e:	f5 01       	movw	r30, r10
 230:	81 91       	ld	r24, Z+
 232:	5f 01       	movw	r10, r30
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	8a df       	rcall	.-236    	; 0x14c <twi_tx>
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 238:	f8 01       	movw	r30, r16
 23a:	30 82       	st	Z, r3
			break;

			case 1:
			{
				int x = 8;
				for (int adres = 0; adres <= 14; adres += 2)
 23c:	22 96       	adiw	r28, 0x02	; 2
 23e:	c0 31       	cpi	r28, 0x10	; 16
 240:	d1 05       	cpc	r29, r1
 242:	79 f7       	brne	.-34     	; 0x222 <PacmanAnimatie+0xc0>
 244:	7a c0       	rjmp	.+244    	; 0x33a <PacmanAnimatie+0x1d8>
 246:	0f 2e       	mov	r0, r31
 248:	f0 e1       	ldi	r31, 0x10	; 16
 24a:	af 2e       	mov	r10, r31
 24c:	f1 e0       	ldi	r31, 0x01	; 1
 24e:	bf 2e       	mov	r11, r31
 250:	f0 2d       	mov	r31, r0

void PacmanAnimatie()
{
	for (int i = 0; i < 5; i ++)
	{
		switch (i)
 252:	c2 2d       	mov	r28, r2
 254:	d9 2d       	mov	r29, r9
			case 2:
			{
				int x = 16;
				for (int adres = 0; adres <= 14; adres += 2)
				{
					twi_start();
 256:	71 df       	rcall	.-286    	; 0x13a <twi_start>
					twi_tx(0xE0);	// Display I2C addres + R/W bit
 258:	80 ee       	ldi	r24, 0xE0	; 224
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	77 df       	rcall	.-274    	; 0x14c <twi_tx>
					twi_tx(adres);	// Address
 25e:	ce 01       	movw	r24, r28
 260:	75 df       	rcall	.-278    	; 0x14c <twi_tx>
					twi_tx(pacman[x].data);	// data
 262:	f5 01       	movw	r30, r10
 264:	81 91       	ld	r24, Z+
 266:	5f 01       	movw	r10, r30
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	70 df       	rcall	.-288    	; 0x14c <twi_tx>
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 26c:	f8 01       	movw	r30, r16
 26e:	30 82       	st	Z, r3
			break;

			case 2:
			{
				int x = 16;
				for (int adres = 0; adres <= 14; adres += 2)
 270:	22 96       	adiw	r28, 0x02	; 2
 272:	c0 31       	cpi	r28, 0x10	; 16
 274:	d1 05       	cpc	r29, r1
 276:	79 f7       	brne	.-34     	; 0x256 <PacmanAnimatie+0xf4>
 278:	60 c0       	rjmp	.+192    	; 0x33a <PacmanAnimatie+0x1d8>
 27a:	53 01       	movw	r10, r6

void PacmanAnimatie()
{
	for (int i = 0; i < 5; i ++)
	{
		switch (i)
 27c:	c2 2d       	mov	r28, r2
 27e:	d9 2d       	mov	r29, r9
			case 3:
			{
				int x = 24;
				for (int adres = 0; adres <= 14; adres += 2)
				{
					twi_start();
 280:	5c df       	rcall	.-328    	; 0x13a <twi_start>
					twi_tx(0xE0);	// Display I2C addres + R/W bit
 282:	80 ee       	ldi	r24, 0xE0	; 224
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	62 df       	rcall	.-316    	; 0x14c <twi_tx>
					twi_tx(adres);	// Address
 288:	ce 01       	movw	r24, r28
 28a:	60 df       	rcall	.-320    	; 0x14c <twi_tx>
					twi_tx(pacman[x].data);	// data
 28c:	f5 01       	movw	r30, r10
 28e:	81 91       	ld	r24, Z+
 290:	5f 01       	movw	r10, r30
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	5b df       	rcall	.-330    	; 0x14c <twi_tx>
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 296:	f8 01       	movw	r30, r16
 298:	30 82       	st	Z, r3
			break;

			case 3:
			{
				int x = 24;
				for (int adres = 0; adres <= 14; adres += 2)
 29a:	22 96       	adiw	r28, 0x02	; 2
 29c:	c0 31       	cpi	r28, 0x10	; 16
 29e:	d1 05       	cpc	r29, r1
 2a0:	79 f7       	brne	.-34     	; 0x280 <PacmanAnimatie+0x11e>
 2a2:	4b c0       	rjmp	.+150    	; 0x33a <PacmanAnimatie+0x1d8>
 2a4:	00 e1       	ldi	r16, 0x10	; 16
 2a6:	11 e0       	ldi	r17, 0x01	; 1

void PacmanAnimatie()
{
	for (int i = 0; i < 5; i ++)
	{
		switch (i)
 2a8:	c0 e0       	ldi	r28, 0x00	; 0
 2aa:	d0 e0       	ldi	r29, 0x00	; 0
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 2ac:	0f 2e       	mov	r0, r31
 2ae:	f4 e7       	ldi	r31, 0x74	; 116
 2b0:	cf 2e       	mov	r12, r31
 2b2:	d1 2c       	mov	r13, r1
 2b4:	f0 2d       	mov	r31, r0
 2b6:	0f 2e       	mov	r0, r31
 2b8:	f4 e9       	ldi	r31, 0x94	; 148
 2ba:	ff 2e       	mov	r15, r31
 2bc:	f0 2d       	mov	r31, r0
			case 4:
			{
				int x = 16;
				for (int adres = 0; adres <= 14; adres += 2)
				{
					twi_start();
 2be:	3d df       	rcall	.-390    	; 0x13a <twi_start>
					twi_tx(0xE0);	// Display I2C addres + R/W bit
 2c0:	80 ee       	ldi	r24, 0xE0	; 224
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	43 df       	rcall	.-378    	; 0x14c <twi_tx>
					twi_tx(adres);	// Address
 2c6:	ce 01       	movw	r24, r28
 2c8:	41 df       	rcall	.-382    	; 0x14c <twi_tx>
					twi_tx(pacman[x].data);	// data
 2ca:	f8 01       	movw	r30, r16
 2cc:	81 91       	ld	r24, Z+
 2ce:	8f 01       	movw	r16, r30
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	3c df       	rcall	.-392    	; 0x14c <twi_tx>
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 2d4:	f6 01       	movw	r30, r12
 2d6:	f0 82       	st	Z, r15
			break;

			case 4:
			{
				int x = 16;
				for (int adres = 0; adres <= 14; adres += 2)
 2d8:	22 96       	adiw	r28, 0x02	; 2
 2da:	c0 31       	cpi	r28, 0x10	; 16
 2dc:	d1 05       	cpc	r29, r1
 2de:	79 f7       	brne	.-34     	; 0x2be <PacmanAnimatie+0x15c>
 2e0:	28 c0       	rjmp	.+80     	; 0x332 <PacmanAnimatie+0x1d0>
 2e2:	08 e0       	ldi	r16, 0x08	; 8
 2e4:	11 e0       	ldi	r17, 0x01	; 1

void PacmanAnimatie()
{
	for (int i = 0; i < 5; i ++)
	{
		switch (i)
 2e6:	c0 e0       	ldi	r28, 0x00	; 0
 2e8:	d0 e0       	ldi	r29, 0x00	; 0
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 2ea:	0f 2e       	mov	r0, r31
 2ec:	f4 e7       	ldi	r31, 0x74	; 116
 2ee:	cf 2e       	mov	r12, r31
 2f0:	d1 2c       	mov	r13, r1
 2f2:	f0 2d       	mov	r31, r0
 2f4:	0f 2e       	mov	r0, r31
 2f6:	f4 e9       	ldi	r31, 0x94	; 148
 2f8:	ff 2e       	mov	r15, r31
 2fa:	f0 2d       	mov	r31, r0
			case 5:
			{
				int x = 8;
				for (int adres = 0; adres <= 14; adres += 2)
				{
					twi_start();
 2fc:	1e df       	rcall	.-452    	; 0x13a <twi_start>
					twi_tx(0xE0);	// Display I2C addres + R/W bit
 2fe:	80 ee       	ldi	r24, 0xE0	; 224
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	24 df       	rcall	.-440    	; 0x14c <twi_tx>
					twi_tx(adres);	// Address
 304:	ce 01       	movw	r24, r28
 306:	22 df       	rcall	.-444    	; 0x14c <twi_tx>
					twi_tx(pacman[x].data);	// data
 308:	f8 01       	movw	r30, r16
 30a:	81 91       	ld	r24, Z+
 30c:	8f 01       	movw	r16, r30
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	1d df       	rcall	.-454    	; 0x14c <twi_tx>
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 312:	f6 01       	movw	r30, r12
 314:	f0 82       	st	Z, r15
			break;

			case 5:
			{
				int x = 8;
				for (int adres = 0; adres <= 14; adres += 2)
 316:	22 96       	adiw	r28, 0x02	; 2
 318:	c0 31       	cpi	r28, 0x10	; 16
 31a:	d1 05       	cpc	r29, r1
 31c:	79 f7       	brne	.-34     	; 0x2fc <PacmanAnimatie+0x19a>
 31e:	09 c0       	rjmp	.+18     	; 0x332 <PacmanAnimatie+0x1d0>
				}
			}
			break;
		} 

		wait(500);
 320:	84 ef       	ldi	r24, 0xF4	; 244
 322:	91 e0       	ldi	r25, 0x01	; 1
 324:	f3 de       	rcall	.-538    	; 0x10c <wait>
	{30}, {63}, {253}, {255}, {255}, {255}, {63}, {30}
};

void PacmanAnimatie()
{
	for (int i = 0; i < 5; i ++)
 326:	f5 e0       	ldi	r31, 0x05	; 5
 328:	ef 16       	cp	r14, r31
 32a:	f1 04       	cpc	r15, r1
 32c:	0c f4       	brge	.+2      	; 0x330 <PacmanAnimatie+0x1ce>
 32e:	48 cf       	rjmp	.-368    	; 0x1c0 <PacmanAnimatie+0x5e>
 330:	08 c0       	rjmp	.+16     	; 0x342 <PacmanAnimatie+0x1e0>
				}
			}
			break;
		} 

		wait(500);
 332:	84 ef       	ldi	r24, 0xF4	; 244
 334:	91 e0       	ldi	r25, 0x01	; 1
 336:	ea de       	rcall	.-556    	; 0x10c <wait>
 338:	04 c0       	rjmp	.+8      	; 0x342 <PacmanAnimatie+0x1e0>
 33a:	84 ef       	ldi	r24, 0xF4	; 244
 33c:	91 e0       	ldi	r25, 0x01	; 1
 33e:	e6 de       	rcall	.-564    	; 0x10c <wait>
 340:	3f cf       	rjmp	.-386    	; 0x1c0 <PacmanAnimatie+0x5e>
	}
}
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	1f 91       	pop	r17
 348:	0f 91       	pop	r16
 34a:	ff 90       	pop	r15
 34c:	ef 90       	pop	r14
 34e:	df 90       	pop	r13
 350:	cf 90       	pop	r12
 352:	bf 90       	pop	r11
 354:	af 90       	pop	r10
 356:	9f 90       	pop	r9
 358:	7f 90       	pop	r7
 35a:	6f 90       	pop	r6
 35c:	5f 90       	pop	r5
 35e:	4f 90       	pop	r4
 360:	3f 90       	pop	r3
 362:	2f 90       	pop	r2
 364:	08 95       	ret

00000366 <initall>:

void initall()
{
 366:	1f 93       	push	r17
 368:	cf 93       	push	r28
 36a:	df 93       	push	r29
	init();
 36c:	bf de       	rcall	.-642    	; 0xec <init>
	spi_masterInit(); // Initialize spi module
 36e:	31 d0       	rcall	.+98     	; 0x3d2 <spi_masterInit>
	displayDriverInit(); // Initialize display chip
 370:	52 d0       	rcall	.+164    	; 0x416 <displayDriverInit>
	twi_init();		// Init TWI interface
 372:	dd de       	rcall	.-582    	; 0x12e <twi_init>

	// Init HT16K22.
	twi_start();
 374:	e2 de       	rcall	.-572    	; 0x13a <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 376:	80 ee       	ldi	r24, 0xE0	; 224
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	e8 de       	rcall	.-560    	; 0x14c <twi_tx>
	twi_tx(0x21);	// Internal osc on
 37c:	81 e2       	ldi	r24, 0x21	; 33
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	e5 de       	rcall	.-566    	; 0x14c <twi_tx>
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 382:	c4 e7       	ldi	r28, 0x74	; 116
 384:	d0 e0       	ldi	r29, 0x00	; 0
 386:	14 e9       	ldi	r17, 0x94	; 148
 388:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C addres + R/W bit
	twi_tx(0x21);	// Internal osc on
	twi_stop();

	twi_start();
 38a:	d7 de       	rcall	.-594    	; 0x13a <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 38c:	80 ee       	ldi	r24, 0xE0	; 224
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	dd de       	rcall	.-582    	; 0x14c <twi_tx>
	twi_tx(0xA0);	// HT16K33 pins all output
 392:	80 ea       	ldi	r24, 0xA0	; 160
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	da de       	rcall	.-588    	; 0x14c <twi_tx>
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 398:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0xA0);	// HT16K33 pins all output
	twi_stop();

	twi_start();
 39a:	cf de       	rcall	.-610    	; 0x13a <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 39c:	80 ee       	ldi	r24, 0xE0	; 224
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	d5 de       	rcall	.-598    	; 0x14c <twi_tx>
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
 3a2:	83 ee       	ldi	r24, 0xE3	; 227
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	d2 de       	rcall	.-604    	; 0x14c <twi_tx>
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 3a8:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
	twi_stop();

	twi_start();
 3aa:	c7 de       	rcall	.-626    	; 0x13a <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 3ac:	80 ee       	ldi	r24, 0xE0	; 224
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	cd de       	rcall	.-614    	; 0x14c <twi_tx>
	twi_tx(0x81);	// Display OFF - Blink On
 3b2:	81 e8       	ldi	r24, 0x81	; 129
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	ca de       	rcall	.-620    	; 0x14c <twi_tx>
	while( 0x00 == (TWCR & 0x80) );
}

void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 3b8:	18 83       	st	Y, r17

	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0x81);	// Display OFF - Blink On
	twi_stop();
}
 3ba:	df 91       	pop	r29
 3bc:	cf 91       	pop	r28
 3be:	1f 91       	pop	r17
 3c0:	08 95       	ret

000003c2 <main>:

void main( void )
{
	DDRD = 0b11111111;
 3c2:	8f ef       	ldi	r24, 0xFF	; 255
 3c4:	81 bb       	out	0x11, r24	; 17
	DDRC = 0xFF;
 3c6:	84 bb       	out	0x14, r24	; 20
	DDRB=0x01; // Set PB0 pin as output for display select
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	87 bb       	out	0x17, r24	; 23
	initall();
 3cc:	cc df       	rcall	.-104    	; 0x366 <initall>
	
	while (1)
	{
		PacmanAnimatie();
 3ce:	c9 de       	rcall	.-622    	; 0x162 <PacmanAnimatie>
	}
 3d0:	fe cf       	rjmp	.-4      	; 0x3ce <main+0xc>

000003d2 <spi_masterInit>:
 {
	 SPDR = data; // Load byte --> starts transmission
	 while( !(SPSR & BIT(SPIF)) ); // Wait for transmission complete
	 data = SPDR; // New received data (eventually, MISO) in SPDR
	 return data; // Return received byte
 }
 3d2:	8f ef       	ldi	r24, 0xFF	; 255
 3d4:	87 bb       	out	0x17, r24	; 23
 3d6:	bb 98       	cbi	0x17, 3	; 23
 3d8:	c0 9a       	sbi	0x18, 0	; 24
 3da:	82 e5       	ldi	r24, 0x52	; 82
 3dc:	8d b9       	out	0x0d, r24	; 13
 3de:	08 95       	ret

000003e0 <spi_write>:
 3e0:	8f b9       	out	0x0f, r24	; 15
 3e2:	77 9b       	sbis	0x0e, 7	; 14
 3e4:	fe cf       	rjmp	.-4      	; 0x3e2 <spi_write+0x2>
 3e6:	08 95       	ret

000003e8 <spi_slaveSelect>:
 // Select device on pinnumer PORTB
 void spi_slaveSelect(unsigned char chipNumber)
 {
	 PORTB &= ~BIT(chipNumber);
 3e8:	98 b3       	in	r25, 0x18	; 24
 3ea:	21 e0       	ldi	r18, 0x01	; 1
 3ec:	30 e0       	ldi	r19, 0x00	; 0
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <spi_slaveSelect+0xc>
 3f0:	22 0f       	add	r18, r18
 3f2:	33 1f       	adc	r19, r19
 3f4:	8a 95       	dec	r24
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <spi_slaveSelect+0x8>
 3f8:	20 95       	com	r18
 3fa:	29 23       	and	r18, r25
 3fc:	28 bb       	out	0x18, r18	; 24
 3fe:	08 95       	ret

00000400 <spi_slaveDeSelect>:
 }
 // Deselect device on pinnumer PORTB
 void spi_slaveDeSelect(unsigned char chipNumber)
 {
	 PORTB |= BIT(chipNumber);
 400:	98 b3       	in	r25, 0x18	; 24
 402:	21 e0       	ldi	r18, 0x01	; 1
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	02 c0       	rjmp	.+4      	; 0x40c <spi_slaveDeSelect+0xc>
 408:	22 0f       	add	r18, r18
 40a:	33 1f       	adc	r19, r19
 40c:	8a 95       	dec	r24
 40e:	e2 f7       	brpl	.-8      	; 0x408 <spi_slaveDeSelect+0x8>
 410:	29 2b       	or	r18, r25
 412:	28 bb       	out	0x18, r18	; 24
 414:	08 95       	ret

00000416 <displayDriverInit>:
 }
 void displayDriverInit()
 {
	 spi_slaveSelect(0); // Select display chip (MAX7219)
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	e7 df       	rcall	.-50     	; 0x3e8 <spi_slaveSelect>
	 spi_write(0x09); // Register 09: Decode Mode
 41a:	89 e0       	ldi	r24, 0x09	; 9
 41c:	e1 df       	rcall	.-62     	; 0x3e0 <spi_write>
	 spi_write(0xFF); // -> 1's = BCD mode for all digits
 41e:	8f ef       	ldi	r24, 0xFF	; 255
 420:	df df       	rcall	.-66     	; 0x3e0 <spi_write>
	 spi_slaveDeSelect(0); // Deselect display chip
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	ed df       	rcall	.-38     	; 0x400 <spi_slaveDeSelect>
	 spi_slaveSelect(0); // Select dispaly chip
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	df df       	rcall	.-66     	; 0x3e8 <spi_slaveSelect>
	 spi_write(0x0A); // Register 0A: Intensity
 42a:	8a e0       	ldi	r24, 0x0A	; 10
 42c:	d9 df       	rcall	.-78     	; 0x3e0 <spi_write>
	 spi_write(0x0F); // -> Level 4 (in range [1..F]) ----------->kan tot F staat er dus staat nu op F
 42e:	8f e0       	ldi	r24, 0x0F	; 15
 430:	d7 df       	rcall	.-82     	; 0x3e0 <spi_write>
	 spi_slaveDeSelect(0); // Deselect display chip
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	e5 df       	rcall	.-54     	; 0x400 <spi_slaveDeSelect>
	 spi_slaveSelect(0); // Select display chip
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	d7 df       	rcall	.-82     	; 0x3e8 <spi_slaveSelect>
	 spi_write(0x0B); // Register 0B: Scan-limit
 43a:	8b e0       	ldi	r24, 0x0B	; 11
 43c:	d1 df       	rcall	.-94     	; 0x3e0 <spi_write>
	 spi_write(0x04); // -> 1 = Display digits 0..1   -----------> hier is naar 4 veranderd zodat er 4 geschreven kunnen worden
 43e:	84 e0       	ldi	r24, 0x04	; 4
 440:	cf df       	rcall	.-98     	; 0x3e0 <spi_write>
	 spi_slaveDeSelect(0); // Deselect display chip
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	dd df       	rcall	.-70     	; 0x400 <spi_slaveDeSelect>
	 spi_slaveSelect(0); // Select display chip
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	cf df       	rcall	.-98     	; 0x3e8 <spi_slaveSelect>
	 spi_write(0x0C); // Register 0B: Shutdown register
 44a:	8c e0       	ldi	r24, 0x0C	; 12
 44c:	c9 df       	rcall	.-110    	; 0x3e0 <spi_write>
	 spi_write(0x01); // -> 1 = Normal operation
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	c7 df       	rcall	.-114    	; 0x3e0 <spi_write>
	 spi_slaveDeSelect(0); // Deselect display chip
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	d5 cf       	rjmp	.-86     	; 0x400 <spi_slaveDeSelect>
 456:	08 95       	ret

00000458 <_exit>:
 458:	f8 94       	cli

0000045a <__stop_program>:
 45a:	ff cf       	rjmp	.-2      	; 0x45a <__stop_program>
